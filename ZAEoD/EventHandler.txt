#include "ZAEoD/WeaponSwitch.txt"
#include "ZAEoD/EventMisc.txt"

Class ACSConverter play
{
	static void ToggleDirectors(int on = 0, bool text = false, bool forced = false)
	{
		AEoDHandler.SendNetworkEvent("ToggleDirectors", on, text, forced);
	}
}
Class AEoDHandler : EventHandler
{
	enum EGameMode
	{
		GameMode_Normal = 0,
		GameMode_L4D
	};
	enum ECvarList
	{
		Game_Blood,
		Game_Doom,
		Game_Duke,
		Game_Heretic,
		Game_Hexen,
		Game_Hexen2,
		Game_HL,
		Game_HL2,
		Game_MM,
		Game_Powerslave,
		Game_Quake1,
		Game_Quake2,
		Game_Quake4,
		Game_SW,
		Extra_Dm64,
		Extra_Hellspawn,
		Extra_Joke,
		Extra_L4DMon,
		Extra_ROTT,
		
		GameCount = 10,
		ExtraCount = 5,
		TotalCount = GameCount + ExtraCount
	};
	
	private int		Themes;
	
	AEArray 		Monsters, DeadMonsters, Absorbables, FX, Souls;
	bool 			DemonMorph, CvarsUpdated, DirectorsEnabled, NoDirectors;
	DirectorBase 	L4DDirector, NormalDirector;
	int 			L4DIntensity, MonIntensity, L4DDir, NorDir,
					DirDelay, GameMode;
	uint16 			GibCount, GibSoft, GibHard;
	
	
	
	static clearscope AEoDHandler Fetch()
	{
		return AEoDHandler(Find("AEoDHandler"));
	}
	
	void GetCvars()
	{
		L4DIntensity = 		user_L4DIntensity;
		MonIntensity = 		user_MonIntensity;
		DirDelay = 			DirectorDelay;
		GameMode =			AEoDGameMode;
		NorDir =			user_NorDir;
		L4DDir =			user_L4DDir;
	}
	
	private void UpdateThemes()
	{
		/*
		"user_Doom",			// Normal
		"user_Blood",			// Normal + Magic
		"user_Duke",			// Normal
		"user_HL",				// Normal + Tech
		"user_HL2",				// Tech
		"user_Heretic",			// Magic
		"user_Hexen",			// Magic
		"user_Hexen2",			// Magic
		"user_MM",				// Magic
		"user_Powerslave",		// Normal
		"user_Quake1",			// Normal
		"user_Quake2",			// Tech
		"user_Quake4",			// Tech
		"user_SW",				// Normal
		"user_Strife"			// Tech
		
		// These are extras, not full themes, but they still count for weapon
		// and ammo spawning.
		"user_Dm64", 			// Normal + Magic (Final boss drops a magic weapon)
		"user_Hellspawn", 		// Normal + Tech
		"user_Joke", 			// Joke
		"user_L4DMon", 			// Normal
		"user_ROTT" 			// Normal + Magic
		*/
		
		// Start from a fresh slate.
		Themes = 0;
		
		// If any single one of these are active, it counts towards that theme
		// and the desired items will spawn.
		
		
		if (user_Doom || user_Blood || user_Duke || user_Powerslave || user_Quake1 ||
			user_SW || user_Dm64 || user_Hellspawn || user_L4DMon || user_ROTT ||
			user_HL)
			Themes |= Theme_Normal;
		
		if (user_Blood || user_Heretic || user_Hexen || user_Hexen2 || user_MM ||
			user_Dm64 || user_ROTT)
			Themes |= Theme_Magic;
			
		if (user_HL || user_HL2 || user_Quake2 || user_Quake4 || user_Strife)
			Themes |= Theme_Tech;
			
		if (user_Joke)
			Themes |= Theme_Joke;
	}
	
	int GetThemes()	{ return Themes; }
	
	override void OnRegister()
	{
		Super.OnRegister();
		if (level.mapname == 'TitleMap' || level.levelname == 'TitleMap')
			DestroyMe = true;
		else
		{
			
			UpdateThemes();
		}
	}
	private bool DestroyMe;
	private uint8 Timer;
	private bool FirstTime;
	override void WorldTick()
	{
		if (DestroyMe)
		{
			if (!bDESTROYED)
				Destroy();
			return;
		}
		
		Timer++;
		
		if ((Timer % 35) == 0)
		{
			Actor plr;
			if (playeringame[0])
				plr = players[0].mo;
			if (plr)
			{
				if (GameMode == 1)
				{
					if (!L4DDirector)
					{
						Actor.Spawn("TheDirectorL4D", plr.pos);
						plr.A_GiveInventory("L4DDirToken");
					}
				}
				else
				{
					if (NorDir && !NormalDirector)	Actor.Spawn("TheDirector", plr.pos);
					if (L4DDir && !L4DDirector)	
					{
						Actor.Spawn("TheDirectorL4D", plr.pos);
						plr.A_GiveInventory("L4DDirToken");
					}
				}
			}
			DirectorsEnabled = (NorDir || L4DDir);
		}
		
		
		if (Timer >= 350)
		{
			Timer = 0;
			int size = Monsters.Actors.Size();
			for (int i = 0; i < size; i++)
			{
				Actor mo = Monsters.Actors[i];
				if (mo && (mo.health < 1 || mo is 'AEoDCorpse'))
				{
					if (DeadMonsters.Find(mo) >= DeadMonsters.Size())
						DeadMonsters.Push(mo);
					Monsters.Actors[i] = null;					
				}
			}
			size = DeadMonsters.Actors.Size();
			for (int i = 0; i < size; i++)
			{
				Actor mo = DeadMonsters.Actors[i];
				if (mo && mo.health > 0 && !(mo is 'AEoDCorpse'))
				{
					Monsters.Push(mo);
					DeadMonsters.Actors[i] = null;
				}
			}
			
			Monsters.Clean();
			DeadMonsters.Clean();
			Absorbables.Clean();
			Souls.Clean();
			FX.Clean();
		}
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		if (DestroyMe)	return;
		
		GibCount = Timer = 0;
		Monsters = AEArray.Create();
		DeadMonsters = AEArray.Create();
		Absorbables = AEArray.Create();
		Souls = AEArray.Create();
		FX = AEArray.Create();
		
		GetCvars();
		UpdateThemes();
		let plr = players[0].mo;
	}
	
	// Tremendous thanks to Phantombeta for helping me out with this.
	override bool InputProcess(InputEvent ev)
	{
		if (DestroyMe)	return false;
		if (ev.Type == InputEvent.Type_KeyDown)// && ev.KeyChar >= 0x30 && ev.KeyChar <= 0x39) // 0x30, 0x39 are '0' and '9'
		{		
			// Make sure the player exists.
			let plr = players[consoleplayer].mo;
			if (!plr || plr.health < 1 || plr.FindInventory("PowerMorph",true))
				// Ignore players that are morphed, dead or non-existent.
				return false;
				
			static const String KeyBindsCCMDs [] = {
				"slot 1", "slot 2", "slot 3", "slot 4", "slot 5",
				"slot 6", "slot 7", "slot 8", "slot 9", "slot 0",
				"weapnext", "weapprev"	};
			static const String KeyBindsNetEvents [] = {
				"slot:1", "slot:2", "slot:3", "slot:4", "slot:5",
				"slot:6", "slot:7", "slot:8", "slot:9", "slot:0",
				"next", "prev"	};
			
			// Find the key and translate it from the raw command to an 
			// event-friendly string. Makes splitting it easier.
			int bind1, bind2;
			for (int i = 0; i < KeyBindsCCMDs.Size(); i++) 
			{
				// Bindings is a global struct. Definition in menu.txt inside GZDoom.pk3.
				// Get the keys that are bound to this action.
				[bind1, bind2] = Bindings.GetKeysForCommand (KeyBindsCCMDs [i]);
				
				if (ev.KeyScan == bind1 || ev.KeyScan == bind2) 
				{
				//	EventHandler.SendNetworkEvent (String.Format ("ScrollWheelHijack:%s", KeyBindsNetEvents [i]));
					EventHandler.SendNetworkEvent(String.Format("AEoD_SelectWeapon:%s", KeyBindsNetEvents[i]));
					return true;
				}
			}
		}
		return false;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{	
		if (DestroyMe)	return;
		
		int num = e.Player;
		let plr = players[num].mo;
		if (!plr)	return;
		
		Array<String> strings;
		e.Name.Split (strings, ":");

		if (strings.Size() > 1)
		{
			if (strings[0] == 'AEoD_SelectWeapon')
				ChangeWeapons(e);
		}
		else if (e.Name == 'ToggleDirectors')
		{
			ToggleDirectors(e.Args[0], e.Args[1], e.Args[2]);
		}
		else if (e.IsManual)
		{	
			// Don't let outside mods try to end the morph.
			// Only if done by console will it allow an abrupt ending.
			if (e.Name == 'EndDemonMorph')
			{
				let dm = DemonPlayerMorph(plr);
				if (dm)
				{
					dm.EndMorph();
				}
			}
		}
		else
		{
			if (e.Name == 'DemonMorphOn')
			{
				ToggleDemonMorphEffect(true);
			}
			else if (e.Name == 'DemonMorphOff')
			{
				ToggleDemonMorphEffect(false);
			}
		}
	}
	
	bool, bool CheckGibCount()
	{
		bool soft = (GibCount < MaxSoftGibCount);
		bool hard = (GibCount < MaxGibCount);
		return hard, soft;
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		if (DestroyMe)	return;
		
		Actor mo = e.Thing;
		if (!mo)
			return;
		
		if (mo is "GibletBase")
		{
			GibCount++;
			return;
		}
		
		if (mo is 'GibSpawnerBase')
		{
			let gib = GibSpawnerBase(mo);
			if (gib)
			{
				gib.Event = self;
				return;
			}
		}
		if (mo.bCORPSE || mo is 'AEoDCorpse')
		{
			DeadMonsters.Push(mo);
			return;
		}
		
		if (mo is 'DMSoulFragment')
		{
			Souls.Push(mo);
			return;
		}
		
		if (mo is 'SoulReaperBeam')
		{
			let beam = SoulReaperBeam(mo);
			if (beam)	beam.Event = self;
			return;
		}
		
		// Don't give to things that are always invisible such as the directors
		// or the base monster spawners. Obviously ignore anything with NOINTERACTION
		// since giving that to a monster while alive is just a bad idea.
		if (mo.bNOINTERACTION || mo.bNOBLOCKMAP || mo is "DirectorBase" || mo is "AEoDMonsterSpawner")
			return;
			
		if (mo.bISMONSTER || mo.bSHOOTABLE)
		{
			if (mo.health > 0)
			{
				if (DemonMorph && mo.bISMONSTER)
					mo.A_GiveInventory("DemonMorphTranslationItem", 1);
				Monsters.Push(mo);
			}
			else
				DeadMonsters.Push(mo);
		}
		
		else if ((mo is "Inventory" && mo.species == 'Absorbable') || mo is "AEoDCorpse")
			Absorbables.Push(mo);
		
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		if (DestroyMe)	return;
	
		Actor mo = e.Thing;
		if (!mo || mo.bNOINTERACTION || mo.bNOBLOCKMAP || mo is "DirectorBase" || mo is "AEoDMonsterSpawner")
			return;
		
		if (Monsters.Find(mo) < Monsters.Size())
		{
			DeadMonsters.Push(mo);
			Monsters.Delete(mo);
		}
	}
	
	override void WorldThingRevived(WorldEvent e)
	{
		if (DestroyMe)	return;
	
		Actor mo = e.Thing;
		if (mo && mo.bISMONSTER)
		{
			if (DemonMorph)
				mo.A_GiveInventory("DemonMorphTranslationItem", 1);
			
			// AEArray handles Delete differently than expected.
			Monsters.Push(mo);
			DeadMonsters.Delete(mo);
		}
	}
	
	override void WorldThingDestroyed(WorldEvent e)
	{
		if (DestroyMe)	return;
		
		Actor mo = e.Thing;
		if (mo is "GibletBase")
		{
			GibCount = Max(0, GibCount - 1);
		}
	}
	
	//==========================================================================
	//==========================================================================
	// Custom Functions
	//==========================================================================
	//==========================================================================
	
	//==========================================================================
	// ChangeWeapons
	//
	// Sets the forthcoming weapon based on the command sent to it. Applicable
	// commands are:
	// 
	// slot # (0-9)
	// weapnext
	// weapprev
	//==========================================================================
	void ChangeWeapons(ConsoleEvent e) 
	{
		if (DestroyMe)	return;
	
		int pnum = e.Player;
		if (!playeringame[pnum])
			return;
			
		PlayerInfo player = players[pnum];

		if (!player) // Return if the player is null
			return;

		Array<String> commandStrings;
		e.Name.Split (commandStrings, ":");
		if (commandStrings.Size() < 2) // Return if the array contains less than two strings
			return;
			
		// At this point, we should have at minimum two strings in this form:
		// [0] = AEoD_SelectWeapon
		// [1] = <command>
		// See InputProcess for the translations (from first to second array)
		
		let ready = player.ReadyWeapon;
		let pending = player.PendingWeapon;
		
		AEoDWeaponIdentifier Finder = new("AEoDWeaponIdentifier");
		Weapon next = null;
		if (commandStrings[1] == 'next')
		{
			next = Weapon(Finder.GetNextWeapon(player, AEoDWeaponIdentifier.Ins_SetNext));
		}
		else if (commandStrings[1] == 'prev')
		{
			next = Weapon(Finder.GetNextWeapon(player, AEoDWeaponIdentifier.Ins_SetPrev));
		}
		else if (commandStrings[1] == 'slot')
		{
			// Switching to a weapon in slot.
			// AEoD_SelectWeapon:slot:#
			// # is what we want for "slot" command.
			int len = (commandStrings.Size() > 2) ? commandStrings[2].Length() : 0;
			if (len < 1)
			{
				Finder.Destroy();
				return;
			}
			
			String s = commandStrings[2];
			if (len > 1)	s = s.Left(len - 1);
			int num = s.ToInt();
			if (Finder)
				next = Finder.GetNextWeapon(player, AEoDWeaponIdentifier.Ins_SetSlot, num);
		}
		if (next && next != ready)	player.PendingWeapon = next;
		//else Console.Printf("-2");
		Finder.Destroy();
	}
	//==========================================================================
	// ToggleDirectors
	// 
	// Self explanatory.
	//==========================================================================
	static void GlobalToggleDirectors(int on = 0, int notext = 0, bool forced = false)
	{
		AEoDHandler.SendNetworkEvent("ToggleDirectors", on, notext, forced);
	}
	
	void ToggleDirectors(int status, int silent = 0, bool forced = false)
	{
		if (DestroyMe)	return;
		
		bool good = (L4DDirector || NormalDirector);
		
		if (!forced)
		{
			if (AEoDGameMode == GameMode_L4D)
			{
				status = 1;
				silent = 1;
				Console.Printf("Directors cannot be toggled in this game mode.");
			}
		}
		
		if (good)
		{
			if (status != 1 && status != -1)
				status = (DirectorsEnabled) ? -1 : 1;
			
			Switch (status)
			{
				Default:
					Console.Printf("Report to devs! Error code -111");
					break;
				Case 1:	// Enable
					if (!DirectorsEnabled)
					{
						if (!silent)		Console.Printf("Directors Enabled");
						if (L4DDirector)	L4DDirector.Activate(null);
						if (NormalDirector)	NormalDirector.Activate(null);
						DirectorsEnabled = true;
					}
					break;
				Case -1: // Disable
					if (DirectorsEnabled)
					{
						if (!silent)		Console.Printf("Directors Disabled");
						if (L4DDirector)	L4DDirector.Deactivate(null);
						if (NormalDirector)	NormalDirector.Deactivate(null);
						DirectorsEnabled = false;
					}
					break;
			}
		}
	}
	
	//==========================================================================
	// ToggleDemonMorphEffect
	// 
	// Toggles the Demon Morph effect on monsters. Paints actors:
	// Enemy - 		Orangeish Yellow
	// Friendly - 	Blue
	//==========================================================================
	private void ToggleDemonMorphEffect(bool on)
	{
		if (DestroyMe)	return;
		
		if (on)
		{
			DemonMorph = true;
			for (int i = 0; i < Monsters.Size(); i++)
			{
				let mo = Monsters.Actors[i];
				if (mo && mo.bISMONSTER && !mo.bKILLED)
				{
					if (mo.CountInv("DemonMorphTranslationItem") < 1)
						mo.A_GiveInventory("DemonMorphTranslationItem",1);
				}
			}
		}
		else
		{
			//Console.Printf("Called");
			DemonMorph = false;
			for (int i = 0; i < Monsters.Size(); i++)
			{
				let mo = Monsters.Actors[i];
				if (mo && mo.bISMONSTER && !mo.bKILLED)
				{
					let inv = mo.FindInventory("DemonMorphTranslationItem");
					if (inv)	inv.DepleteOrDestroy();
				}
			}
		}
	}
}



