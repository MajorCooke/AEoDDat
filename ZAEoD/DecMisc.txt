Class AEoDFX : Actor
{
	bool RandomRoll;
	bool RandomScaleFlip;
	double RollAdd;
	double RollAddMin;
	double RollAddMax;
	
	property RollAdd:			RollAdd;
	property RollAddMin:		RollAddMin;
	property RollAddMax:		RollAddMax;
	property RandomRoll: 		RandomRoll;
	property RandomScaleFlip: 	RandomScaleFlip;
	
	Default
	{
		AEoDFX.RollAddMin 0.0;
		AEoDFX.RollAddMax 0.0;
		AEoDFX.RollAdd 0.0;
		AEoDFX.RandomRoll false;
		AEoDFX.RandomScaleFlip false;
		+ROLLSPRITE
		+NOTELESTOMP
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (bINVISIBLE) return;
		if (RandomScaleFlip) 	A_SetScale(Scale.X*randompick(-1,1),Scale.Y*randompick(-1,1));
		if (RandomRoll)			roll = frandom(0.0, 359.9);
		if (bROLLSPRITE)
		{
			if (RollAddMin != 0.0 || RollAddMax != 0.0)
				RollAdd = frandom(RollAddMin, RollAddMax);
		}
	}
	
	override void Tick()
	{
		Super.Tick();
		if (bINVISIBLE)	return;
		
		if (bROLLSPRITE)
		{
			if (RollAdd != 0.0)	A_SetRoll(roll + RollAdd, SPF_INTERPOLATE);
		}
	}
}

Class InvisiPuff : AEoDFX
{
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+BLOODLESSIMPACT
		+NODECAL
		+PAINLESS
		+INVISIBLE
	}
	States
	{
	Spawn:
		TNT1 A 5;
		Stop;
	}
}


Class GunSmokeSpawner : AEoDFX
{
	
//	+NOCLIP
	Default
	{
		+NOINTERACTION
		+NOTIMEFREEZE
		Radius 1;
		Height 1;
		Speed 14;
	}
	
	States
	{
	Spawn:
//		TNT1 A 0 A_CustomMissile("GunSmoke2",-2,0,0)
		TNT1 A 0 NoDelay A_SpawnProjectile("GunSmoke",-2,0,0);
		Stop;
	}
}

Class GunSmoke : AEoDFX
{
	const SizeMin = 7;
	const SizeMax = 14;
	const AlphaMin = 0.15;
	const AlphaMax = 0.5;
	const FadeOut = 0.04;
	const ZVelMin = 0.5;
	const ZVelMax = 1.5;
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			static const Color col[] =
			{
				"AAAAAA",
				"BBBBBB",
				"CCCCCC",
				"DDDDDD",
				"EEEEEE",
				"FFFFFF"
			};
			int rng = random(0,col.Size() - 1);
			A_SpawnParticle(col[rng],0,35,random(SizeMin,SizeMax),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(0,2),0,0,frandom(ZVelMin,ZVelMax),0,0,-0.01,frandom(AlphaMin,AlphaMax),FadeOut);
		}
		Stop;
	}
}
Class GunSmoke2 : GunSmoke
{
}

Class GunSmallSmokeSpawner : AEoDFX
{
	Default
	{
		PROJECTILE;
		+NOINTERACTION
		+NOTIMEFREEZE
		+NOTONAUTOMAP
		+THRUACTORS
		Radius 1;
		Height 1;
		Speed 14;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SpawnProjectile("GunSmallSmoke",-2,0,0);
		Stop;
	}
}

Class GunSmallSmoke : AEoDFX
{
	const SizeMin = 10;
	const SizeMax = 15;
	const AlphaMin = 0.2;
	const AlphaMax = 0.8;
	const FadeOut = 0.03;
	const ZVelMin = 1.0;
	const ZVelMax = 3.0;
	Default
	{
		+NOINTERACTION
		+INVISIBLE
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			static const Color col[] =
			{
				"AAAAAA",
				"BBBBBB",
				"CCCCCC",
				"DDDDDD",
				"EEEEEE",
				"FFFFFF"
			};
			int rng = random(0,col.Size() - 1);
			A_SpawnParticle(col[rng],0,35,random(SizeMin,SizeMax),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(0,2),0,0,frandom(ZVelMin,ZVelMax),0,0,-0.01,frandom(AlphaMin,AlphaMax),FadeOut);
		}
		Stop;
	}
}
Class GunSmallSmoke2 : GunSmallSmoke
{
}

Class CopCasing : AEoDFX
{
	Default
	{
		Height 12;
		Radius 9;
		Speed 1;
		Scale 0.4;
		PROJECTILE;
		BounceType "Doom";
		-NOGRAVITY
		+DONTSPLASH
		-NOBLOCKMAP
		-SOLID
		SeeSound "Casing/mediumsound";
	}
	States
	{
	Spawn:
		CAS6 AFBDEC 1 NoDelay A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		Loop;
	Death:
		CAS6 A 350
		{
			Frame = random(0,5);
		}
		---- A 1 A_FadeOut();
		Stop;
	}
}

Class ChGunCasing : AEoDFX
{
	Default
	{
		Height 12;
		Radius 9;
		Speed 6;
		Scale 0.25;
		BounceFactor 0.4;
		PROJECTILE;
		BounceType "Doom";
		-NOGRAVITY
		+DONTSPLASH
		-NOBLOCKMAP
		-SOLID
		SeeSound "Casing/tinysound";
	}
	States
	{
	Spawn:
		TNT1 A 0 ThrustThingZ(0,10,0,1);
		CSNG A 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		CSNG BC 1;
		CSNG D 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		CSNG EF 1 ;
		CSNG G 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		CSNG HI 1;
		CSNG J 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		CSNG KL 1;
		CSNG M 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		CSNG NO 1;
		CSNG P 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);

		CSNG AB 1;
		CSNG C 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		CSNG DE 1;
		CSNG F 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		CSNG GH 1;
		CSNG I 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		CSNG JK 1;
		CSNG L 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		CSNG MN 1;
		CSNG O 1 A_SpawnItemEx("CasingSmoke",flags: SXF_NOCHECKPOSITION);
		CSNG P 1;

	Death:
		CSNG A 350
		{
			Frame = randompick(Fr_B, Fr_C, Fr_K, Fr_L, Fr_D, Fr_J, Fr_N);
		}
		---- A 1 A_FadeOut();
		Wait;
   }
}


Class BulletTracerFX : AEoDFX 
{
	const Sparsity = 100.0;
	//const Distance = 3.25;
	const Multiplier = 1;
	//const SpawnSpeed = 300;
	//const TravelTic = 125.0 * 30.0;// * 30.0;
	const TravelTic = Sparsity * 30.0;
	enum BulletTracerFX
	{
		ModelOnly = 		1,
		ParticleOnly =		2,
		ParticleTrail =		3,
		TrailOnly =			4,
	};
	int user_inv;
	int user_count;
	int user_rng;
	int user_render;
	double user_dista;
	double user_distb;
	bool renderer;
	override void PostBeginPlay()
	{
		renderer = GetCVar("vid_renderer");
		if (target) pitch = target.pitch;
		Super.PostBeginPlay();
	}
	
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTIMEFREEZE
		RenderStyle "None";
		Speed 1;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{	
			if (A_CheckSight("Null"))
			{	Destroy();	return;	}
			
			A_FaceMovementDirection();
			//pitch *= -1;

			user_distb = tracer ? Clamp(Distance3D(tracer),0.0,3000.0) : 0.0;
		}
	B1:
		TNT1 A 1;
	Break:
		TNT1 A 1 
		{
			if (user_count > 14 || A_CheckSight("Null") || (pos.z < floorz) || (pos.z > ceilingz) ) 
			{	Destroy();	return;	} // Destroy it.
			user_dista = 0;
		}
	Looping:	// Spawns the trail.
		TNT1 A 0
		{
			// If running GZDoom, spawn the neat trail.
			if (renderer)
			{
				if (user_dista <= 0.0)
					user_dista = 16.0;
				A_SpawnItemEx("BulletTrailBeam",cos(pitch)*user_dista,0,-sin(pitch)*user_dista,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
				user_dista += Sparsity;
			}
			else //Otherwise, do the ol' fashion particles.
			{
				A_SpawnParticle("FFE99E",SPF_FULLBRIGHT|SPF_RELATIVE,100,random(3,6),0,
					cos(pitch)*user_dista,0,-sin(pitch)*user_dista,
					frandom(1.0,2.0),0,0,
					-0.005,0,0.005,
					frandom(0.5,1.0),frandom(0.06,0.12));
				
				user_dista += frandom(3.0,6.0);
			}
			
			if (user_distb > 0.0)
			{
				if (user_dista > user_distb)
				{	return ResolveState("Null");	}
				return ResolveState("Looping");
			}
			else if (user_dista >= TravelTic)
			{
				user_count++;
				A_Warp(DefPtr,cos(pitch)*TravelTic,0,-sin(pitch)*TravelTic,0,WARPF_NOCHECKPOSITION);
				return ResolveState("Break");
			}
			return ResolveState("Looping");
		}
		Loop;
	End:
		TNT1 A 0;
		Stop;
	}
}

Class BulletTracerFXInverted : BulletTracerFX
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{	
			if (A_CheckSight("Null"))
			{	return ResolveState("Null");	}
			
			A_FaceMovementDirection();
			pitch *= -1;
			
			user_distb = tracer ? Clamp(Distance3D(tracer),0.0,3000.0) : 0;
			
			return ResolveState("B1");
		}
	}
}

Class TrailBeam : AEoDFX 
{
	const ZOffset = 16;
	const NoSpawn = 256;
	const PFlags = WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY|WARPF_ABSOLUTEOFFSET;
	double user_time;
	double user_scale;
	int user_neg;
	Default 
	{
		+NOINTERACTION
		+FLATSPRITE
		+BRIGHT
		+ROLLCENTER
		YScale 0.25; //Don't touch this! Otherwise the trail will become broken up!
		XScale 0.03; //This modifies the width of the beam. It is safe to play around with.
		Alpha 1.0;
		RenderStyle "Add";
	}
	// DO NOT add a translation. If you need to change the colors, make a sprite
	// entry in TEXTURES lump and use BLEND. NEVER TRANSLATE!
	States
	{
	Spawn:
		X163 B 0 NoDelay
		{
			// Sets how long to split the scaling-in effect.
			user_time = 3.0;
			
			// Set this to the actor's same name. The TID will prevent it spawning infinitely (tid * 256).
			//A_SpawnItemEx("TrailBeam",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
			return ResolveState("Process");
		}
	Process:
		"####" "#" 1
		{
			//A_Warp(DefPtr,0,0,ZOffset,0,WARPF_NOCHECKPOSITION);
			user_scale = Scale.X;
			user_neg = ((user_scale < 0) ? 1 : 0);
			// If it's a secondary trail (vertical)
			if (tid > 0)	
			{	
				ChangeTID(0);
				roll = pitch + 90;
				pitch = 90;
				angle += 90;
			}
			A_FadeIn(1.0,FTF_CLAMP);
		}
		"####" "#" 1 
		{
			// Keep 'shrinking'. NEVER fade out!
			
			if (user_neg)
			{
				A_SetScale(Scale.X - (user_scale / Max(1.0, user_time)), Scale.Y);
				if (Scale.X >= 0)	{ return ResolveState("Null"); }
			}
			else
			{			
				A_SetScale(Scale.X - (user_scale / Max(1.0, user_time)), Scale.Y);
				if (Scale.X <= 0)	{ return ResolveState("Null"); }
			}
			return ResolveState(null);
		}
		Wait;
	}
}

Class MovingTrailBeam : AEoDFX 
{
	const NoSpawn = 256;
	double  user_dist;
	int user_t;
	int user_zoffset;
	double user_angle;
	double user_pitch;
	double user_time;
	double user_scale;
	int user_pflags;
	int user_neg;
	Vector3 next1, next2;
	int uid;
	Default 
	{
		+NOINTERACTION
		+FLATSPRITE
		+BRIGHT
		+ROLLCENTER
		YScale 0.25; //Don't touch this! Otherwise the trail will become broken up!
		XScale 0.03; //This modifies the width of the beam. It is safe to play around with.
		Alpha 0;
		RenderStyle "Add";
	}
	// DO NOT add a translation. If you need to change the colors, make a sprite
	// entry in TEXTURES lump and use BLEND. NEVER TRANSLATE!
	
	States
	{
	Spawn:
		X202 B 0 NoDelay
		{
			// Sets how long to split the scaling-in effect.
			user_time = 3.0;
			user_zoffset = 16;
			
			// Set this to the actor's same name. The TID will prevent it spawning infinitely (tid * 256).
			A_SpawnItemEx("MovingTrailBeam",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
		}
		Goto Process;
	Process:
		"####" "#" 0
		{
			if (!user_pflags)	{ user_pflags = WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEOFFSET;	}
			A_Warp(DefPtr,0,0,user_zoffset,0,WARPF_NOCHECKPOSITION);
			// If it's a secondary trail (vertical)
			if (tid > 0)	
			{	
				ChangeTID(0);
				roll = pitch + 90;
				pitch = 90;
				angle += 90;
			}
		
			// Save our current information so we know how to properly interpolate whenever
			// the owner moves.
			user_neg = (Scale.X < 0) ? 1 : 0;
			user_scale = Scale.X;
			user_angle = angle;
			user_pitch = pitch;
			user_dist = target ? Distance2D(target) : 0;
			next1 = pos;
			
			// Move to the shooter so we can get just how far out we are.
			A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION);
			next2 = next1 - pos;
			
			// Now move back without interpolating. Otherwise it'll look weird.
			A_Warp(TargetPtr,next2.x,next2.y,next2.z,0,WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEOFFSET);
			angle = user_angle;
			pitch = user_pitch;
		}
		"####" "#" 1 
		{
			A_FadeIn(1.0,FTF_CLAMP);
			A_Warp(TargetPtr, next2.x + vel.x, next2.y + vel.y, next2.z + vel.z, 0, user_pflags);
			angle = user_angle;
			pitch = user_pitch;
		}
		"####" "#" 1 
		{
			// Keep 'shrinking'. NEVER fade out!
			if (user_neg)
			{
				//Scale.X -= (user_scale / Max(1.0, user_time))
				A_SetScale(Scale.X - (user_scale / Max(1.0, user_time)), Scale.Y);
				if (Scale.X >= 0)	{ return ResolveState("Null"); }
			}
			else
			{
				A_SetScale(Scale.X - (user_scale / Max(1.0, user_time)), Scale.Y);
				if (Scale.X <= 0)	{ return ResolveState("Null"); }
			}
			A_Warp(TargetPtr, next2.x + vel.x, next2.y + vel.y, next2.z + vel.z ,0, user_pflags);
			angle = user_angle;
			pitch = user_pitch;
			return ResolveState(null);
		}
		Wait;
	}
}

Class BulletTrailBeam : TrailBeam
{
	Default 
	{
		XScale 0.05;
		YScale 1; //Don't touch.
		Translation "0:255=#[255, 192, 96]";
	}
	
	override void PostBeginPlay()
	{
		Pitch += 90;
		Super.PostBeginPlay();
	}
	
	States
	{
	Spawn:
		X163 B 0 NoDelay
		{
			// user_time = time to shrink to nothing
			user_time = 4.0;
			//A_SpawnItemEx("BulletTrailBeam",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
			return ResolveState("Process");
		}
	}
}

Class BulletTrailBeamInverted : BulletTrailBeam
{}