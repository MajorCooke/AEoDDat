//================================================================
//================================================================
//
//	6.X New Blood Effects
//
//================================================================
//================================================================

/*	Currently available blood colors based on what's been used:

	Primary Color		Darker Color
	----------------------------------
	AEPutridGreen		AEPutridGreenD2
	AELimeGreen			AELimeGreenD2
	AEDarkRed			AEDarkRedD2
	AEGreenYellow		AEGreenYellowD2
	AEPoo				AEPooD2
	Black				Black
	Blue 				darkblue
	Brown 				AEPooD2
	DarkGreen 			AEDarkGreenD2
	DarkRed				AEDarkRedD2
	DimGray				AEDimGreyD2
	Gold				AEGoldD2
	GreenYellow			AEGreenYellowD2
	Green				DarkGreen
	Grey				DarkGrey
	LightSlateGray		DarkSlateGrey
	Orange				DarkOrange
	Purple				DarkViolet
	SeaShell2			AESeaShell2D2
	Snow3				Snow4
	White				Grey
	Yellow				AEDarkYellowD2
	AEBatshitRainbow	AEBatshitRainbowD2

================================================================================
						How to add new blood colors
================================================================================
1.	Add the new colors if they're not already defined in AEoDdat.pk3 -> 
	X11R6RGB.txt. Name it "AE<Color>".
	
2.	Make a duplicate entry called "AE<Color>D2" and assign half the RGB values.
	D2 stands for 'divide by 2', or half the color.
	
3.	Add "Color_<NameOfBloodColor>" to the enum below.
	This is only needed for the name itself -- do not define one for the D2
	since it's just there for adding extra tidbits and variance.
	
	Find Step 4+ down below.
	
	if ((bloodcolor & 0xffffff) == color("Red"))
*/

//****************************************************************
//****************************************************************
//
//	v5 Old Blood Effects
//
//****************************************************************
//****************************************************************



Class NewBlood : Blood //replaces Blood  //Blood as in v5.03, kept for compatability
{
	Default
	{
		+DONTSPLASH
		+DONTBLAST
		+NOTELESTOMP
		+NOTONAUTOMAP
		Scale 0.15;
		Gravity 0.44;
		DistanceCheck "user_MaxDrawDistance";
	}
	States
	{
	Spawn:
		BLD1 A 1;
//		TNT1 AAA 0 A_SpawnItemEx("ExtraBlood",random(3,-3),random(3,-3),random(3,-3),0,0,0,0,1)
		TNT1 AAA 0 A_SpawnItemEx("ExtraBlood",random(3,-3),random(3,-3),random(3,-3),1,0,0,random(1,359),GibFlags);
		BLD1 ABCD 6;
		Stop;
	}
}

Class ExtraBlood : NewBlood
{
	Default
	{
		Scale 0.09;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		BLD1 A 1 ThrustThingZ(0,random(5,12),0,1);
		BLD1 A 5;
		BLD1 ABCD 6;
		Stop;
	}
}

Class MCBloodSprite : AEoDFX
{
	Default
	{
		Projectile;
		+THRUACTORS
		+DONTSPLASH
		+NOTIMEFREEZE
		+NOTELESTOMP
		+NOTONAUTOMAP
		+PUFFGETSOWNER
		RenderStyle "Translucent";
		Radius 1;
		Height 1;
		Gravity 0.20;
		Scale 0.3;
		DistanceCheck "user_MaxDrawDistance";
	}
	States
	{
	Buffer:
		X057 ABCDEFGHIJKLMNOPQRS 0;
		XA57 ABCDEFGHIJKLMNOPQRS 0;
		XB57 ABCDEFGHIJKLMNOPQRS 0;
		XC57 ABCDEFGHIJKLMNOPQRS 0;
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SetScale(Scale.X*randompick(-1,1),Scale.Y*randompick(-1,1));
			return A_Jump(256,"B1","B2","B3");
		}
	B11:
		"####" A 0
		{
			static const Name Spr[] =
			{
				"X057",
				"XA57",
				"XB57",
				"XC57"
			};
			sprite = GetSpriteIndex(Spr[random(0,3)]);
		}
		"####" ABCDEF 2 A_FadeOut(0.05);
		"####" GHIJK 1 A_FadeOut(0.05);
		"####" LMNOPQRS 1 A_FadeOut(0.03);
		Wait;
	B2:
		"####" A 0
		{
			static const Name Spr[] =
			{
				"X058",
				"XA58",
				"XB58",
				"XC58"
			};
			sprite = GetSpriteIndex(Spr[random(0,3)]);
		}
		"####" ABCDEF 2 A_FadeOut(0.05);
		"####" GHIJK 1 A_FadeOut(0.05);
		"####" LMNOPQR 1 A_FadeOut(0.03);
		Wait;
	
	B3:
		"####" A 0
		{
			static const Name Spr[] =
			{
				"X059",
				"XA59",
				"XB59",
				"XC59"
			};
			sprite = GetSpriteIndex(Spr[random(0,3)]);
		}
		"####" ABCD 2 A_FadeOut(0.03);
		"####" EFGHIJ 1 A_FadeOut(0.04);
		"####" KLM 1 A_FadeOut(0.05);
		Wait;
	}
}

enum bloodcolors//TIDs ONLY. DO NOT USE IN THE TRANSLATIONS PROPERTY.
{
	Color_NULL				= 0, //
	Color_Red				= Color_NULL,
	Color_LimeGreen			= 1,
	Color_DarkRed			= 2,
	Color_GreenYellow		= 3,
	Color_Poo				= 4,
	Color_PutridGreen		= 5,
	Color_Black				= 6,
	Color_Blue				= 7,
	Color_Brown				= 8,
	Color_DarkGreen			= 9,
	Color_DimGray			= 10,
	Color_DimGrey			= Color_DimGray, //because it can be spelled either way.
	Color_Gold				= 11,
	Color_Green				= 12,
	Color_Grey				= 13,
	Color_Gray				= Color_Grey,
	Color_LightSlateGray	= 14,
	Color_LightSlateGrey	= Color_LightSlateGray,
	Color_Orange			= 15,
	Color_Purple			= 16,
	Color_SeaShell2			= 17,
	Color_Snow3				= 18,
	Color_White				= 19,
	Color_Yellow			= 20,
	Color_BatShitRainbow	= 21,
	//STEP 3 RIGHT HERE.
};

//==============================================================================
//==============================================================================
// Blood
//==============================================================================
//==============================================================================

Class MCBloodFXMain : AEoDFX replaces Blood
{
	const VelMul = 1.0;
	int user_count;
	int user_inv;
	Color P1;
	Default
	{
		//+MISSILE
		+NOBLOCKMAP
		+THRUACTORS
		+NOTIMEFREEZE
		+DONTSPLASH
		+NOTELESTOMP
		+NOTONAUTOMAP
		+PUFFGETSOWNER
		+ALWAYSPUFF
		-ALLOWPARTICLES
		+NOINTERACTION
		+NOTELESTOMP
		+HITTRACER
		BloodColor "Red";
		RenderStyle "None";
		Radius 1;
		Height 1;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (A_CheckSightOrRange(BloodDistanceLimit,"Null"))
		{	Destroy();	return;	}
		A_FaceMovementDirection();
	}
	
	States
	{
	Spawn:
		// DO NOT REMOVE THESE. According to Graf, two tics are required in order
		// for some internal crap to process as P_SpawnBlood has a special priority.
		// So... LEAVE THESE IN AND DON'T TOUCH THEM.
		TNT1 AAA 0 ;
		Goto SpawnBlood;
	SpawnBlood:
		TNT1 A 0
		{
			user_inv = GetCvar("user_BloodSprites");
			if (user_inv <= 0 || user_inv >= 2)
			{
				let blood = MCBloodParticle(Spawn("MCBloodParticle",pos));
				if (blood)
				{	
					blood.angle = angle;
					blood.pitch = pitch;
					blood.target = target;
					blood.master = master;
					blood.tracer = tracer;
					blood.A_Warp(DefPtr,frandom(0,2),0,random(1,4),0,WARPF_NOCHECKPOSITION);
					blood.Vel = Vel;
					blood.P1 = P1;
					
					if (target)
					{
						if (target is "GibletBase")
						{
							let gib = GibletBase(target);
							if (gib)
								P1 = gib.P1;
						}
						else	P1 = (target.bloodcolor & 0xffffff);
						
					}
					else	P1 = (bloodcolor & 0xffffff);
					blood.P1 = P1;
				}
			}
			
			if (user_inv <= 0)
			{	Destroy();	return;	}
		}
		TNT1 A 1 
		{
			
			if (user_inv >= 1)
			{	A_SpawnItemEx("MCBloodSprite",frandom(0,2),0,random(1,4),frandom(0,1.5),0,frandom(0.1,2.0),random(0,359),GibFlags|SXF_TRANSFERTRANSLATION,0);	}
			else
			{	Destroy();	return;	}
		}
		Stop;
	}
}

Class MCBloodFXTrail : MCBloodFXMain
{
	States
	{
	SpawnBlood:
		TNT1 A 0
		{
			A_FaceMovementDirection();
			if (user_inv >= 1)
			{	A_SpawnItemEx("MCBloodSprite",frandom(0,2),0,random(1,4),frandom(0,1.5),0,frandom(0.1,2.0),random(0,359),GibFlags|SXF_TRANSFERTRANSLATION,0);	}
			if (user_inv <= 0 || user_inv >= 2)
			{
				let blood = MCBloodParticle(Spawn("MCBloodParticle",pos));
				if (blood)
				{	
					blood.angle = angle;
					blood.pitch = pitch;
					blood.target = target;
					blood.master = master;
					blood.tracer = tracer;
					blood.A_Warp(DefPtr,frandom(0,2),0,random(1,4),0,WARPF_NOCHECKPOSITION);
					blood.Vel = Vel;
					blood.P1 = P1;
					
					if (target)
					{
						if (target is "GibletBase")
						{
							let gib = GibletBase(target);
							if (gib)
								P1 = gib.P1;
						}
						else	P1 = (target.bloodcolor & 0xffffff);
						
					}
					else	P1 = (bloodcolor & 0xffffff);
					blood.P1 = P1;
				}
			}
		}
		Stop;
	} 
}

Class MCBloodParticle : AEoDFX
{
	// Take note, enums are for integers only. Thus, flags and regular numbers
	// can fit inside them, but floats cannot.
	// Do not add color_ definitions here. The scope is inside the Class for a 
	// reason. To find out more on how enums work, see
	// http://zdoom.org/wiki/Constants#DECORATE_usage
	enum parameters
	{
		PFlag = SPF_RELATIVE,
		Lifetime = 		35,		//Self explanatory.
		Size1Min = 		10,		//Size of bigger particle
		Size1Max = 		20,
		Size2Min = 		5,		//Size of smaller particle
		Size2Max = 		10,
		AOff = 			15,		//Angle
		MaxCount1 =		5,		//Max number of big particles
		MaxCount2 =		15,		//Max number of smaller particles
		MaxCount3 =		MaxCount1 + MaxCount2,
	};
	//Ones without the '2' at the end are for the big particles.
	//Those with the '2' are for the small particles. The default is
	//just to copy them.
	const XOffMin1 = 		1.0;	const XOffMin2 = 		XOffMin1;
	const XOffMax1 = 		-1.0;	const XOffMax2 = 		XOffMax1;
	const XVelMin1 = 		0.5;	const XVelMin2 = 		XVelMin1;
	const XVelMax1 = 		3.0;	const XVelMax2 = 		XVelMax1;
	const XAccMin1 = 		-0.01;	const XAccMin2 = 		XAccMin1;
	const XAccMax1 = 		-0.01;	const XAccMax2 = 		XAccMax1;
	const ZOffMin1 = 		-1.0;	const ZOffMin2 = 		ZOffMin1;
	const ZOffMax1 = 		1.0;	const ZOffMax2 = 		ZOffMax1;
	const ZVelMin1 = 		-0.5;	const ZVelMin2 = 		ZVelMin1;
	const ZVelMax1 = 		2.5;	const ZVelMax2 = 		ZVelMax1;
	const ZAccMin1 = 		-0.36;	const ZAccMin2 = 		ZAccMin1;
	const ZAccMax1 = 		-0.48;	const ZAccMax2 = 		ZAccMax1;
	const StartAlpha1 =		1.0;	const StartAlpha2 =		StartAlpha1;
	const FadeMin1 =		0.04;	const FadeMin2 =		FadeMin1;
	const FadeMax1 =		0.06;	const FadeMax2 =		FadeMax1;
	const PitchOff =		5.0;
	// Multiplies the velocity of the gib-spawned blood by this much. 
	// Has no effect on bullet spawned blood, etc.
	const VelMul = 0.85; //0.75;
	const YVelMul = VelMul;
	const VelAccel = -0.15;
	int user_count;
	double user_vel;
	double user_angle;
	double user_pitch;
	Color P1;
	Color P2;
	Default
	{
		Projectile;
		+NOINTERACTION
		+THRUACTORS
		+DONTSPLASH
		+NOTIMEFREEZE
		+NOTELESTOMP
		+NOTONAUTOMAP
		+PUFFGETSOWNER
		RenderStyle "None";
		Radius 1;
		Height 1;
	}
	
	const arraySize = 19;
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		user_vel = vel.Length() * VelMul;
		user_pitch = pitch;
		user_angle = angle;
		
		
	}
	
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{			
			P2 = P1;
			
			double colmul = frandom(0.30,0.95);
			P2.r = Clamp(P2.r * colmul, 0, 255);
			P2.g = Clamp(P2.g * colmul, 0, 255);
			P2.b = Clamp(P2.b * colmul, 0, 255);
			
			while (user_count < MaxCount3)
			{
				if (random(0,1))	{ A_SpawnParticle(P1,	PFlag, Lifetime, random(Size1Min,Size1Max), frandom(-AOff, AOff), frandom(XOffMin1,XOffMax1), 0, frandom(ZOffMin1,ZOffMax1), (cos(-pitch) * user_vel) + (frandom(XVelMin1,XVelMax1)), frandom(XVelMin1,XVelMax1) * randompick(-1,1), (((sin(-pitch) * Vel.Z) * VelMul) + (frandom(-ZVelMax1,ZVelMax1)))/2, frandom(XAccMin1,XAccMax1), 0, frandom(ZAccMin1,ZAccMax1), StartAlpha1, frandom(FadeMin1,FadeMax1)); }
				else				{ A_SpawnParticle(P2,	PFlag, Lifetime, random(Size2Min,Size2Max), frandom(-AOff, AOff), frandom(XOffMin2,XOffMax2), 0, frandom(ZOffMin2,ZOffMax2), (cos(-pitch) * user_vel) + (frandom(XVelMin2,XVelMax2)), frandom(XVelMin2,XVelMax2) * randompick(-1,1), (((sin(-pitch) * Vel.Z) * VelMul) + (frandom(-ZVelMax2,ZVelMax2)))/2, frandom(XAccMin2,XAccMax2), 0, frandom(ZAccMin2,ZAccMax2), StartAlpha2, frandom(FadeMin2,FadeMax2)); }
				user_count += randompick(1,1,1,2,3);
			}
		}
		Stop;
	}
}


Class AEBloodLimeGreen 		: MCBloodFXMain	{}
Class AEBloodGreenYellow	: MCBloodFXMain	{}
Class AEBloodPoo			: MCBloodFXMain	{}
Class AEBloodPutridGreen 	: MCBloodFXMain	{}
Class AEBloodBlack			: MCBloodFXMain	{}
Class AEBloodBrown			: MCBloodFXMain	{}
Class AEBloodBlue			: MCBloodFXMain	{}
Class AEBloodDarkGreen 		: MCBloodFXMain	{}
Class AEBloodDimGray		: MCBloodFXMain	{}
Class AEBloodGold			: MCBloodFXMain	{}
Class AEBloodGreen 			: MCBloodFXMain	{}
Class AEBloodGrey 			: MCBloodFXMain	{}
Class AEBloodLightSlateGray : MCBloodFXMain	{}
Class AEBloodOrange 		: MCBloodFXMain	{}
Class AEBloodPurple			: MCBloodFXMain	{}
Class AEBloodSeaShell2		: MCBloodFXMain	{}
Class AEBloodSnow3 			: MCBloodFXMain	{}
Class AEBloodWhite 			: MCBloodFXMain	{}
Class AEBloodYellow 		: MCBloodFXMain	{}
Class AEBloodBatShitRainbow : MCBloodFXMain	{}


//It's going to be impossible to translate blood splatters via particles directly
//so just have it spawn the ordinary Class instead.
Class MCBloodSplatter : MCBloodSprite replaces BloodSplatter	{ }
Class GibBloodSmall : MCBloodFXTrail 				{}
Class GibBloodTrailMediumSize	: MCBloodFXTrail	{}

//==============================================================================
//==============================================================================
//
// Globalized Gib Spawners
//
//==============================================================================
//==============================================================================

// The Base Spawner

Class GibSpawnerBase : AEoDFX
{
	AEoDHandler Event;
	const MulMin = 1.0;
	const MulMax = 2.0;
	bool simple, added, ShortGibTime;
	int Index;
	int Cap;
	int SpawnChance;				// Just for the sake of making things simple...
	Color Trans;
	Color P1;
	Vector3 Vel;
	double MulBy[2];
	double RAdd;
	
	Array<Class<Actor> > Gib;
	Array<Int> Amt;
	Array<int> SimpleGib;
	
	Property ShortGibTime: ShortGibTime;
	Property RAdd: RAdd;
	//--------------------------------------------------------------------------
	// PostBeginPlay
	//
	// Since we have no reason to even do anything else, take care of business 
	// go away.
	//--------------------------------------------------------------------------
	
	
	Default
	{
		GibSpawnerBase.RAdd 8;
		GibSpawnerBase.ShortGibTime false;
		+NOTELESTOMP
		+NOTONAUTOMAP
		+NOINTERACTION
		+INVISIBLE
		RenderStyle "None";
		BloodColor "Red";
	}
	bool, bool CheckGibCount()
	{
		if (!Event)	Event = AEoDHandler.Fetch();
		if (Event)
		{
		//	bool soft, hard;
		//	[soft, hard] = Event.CheckGibCount();
			return Event.CheckGibCount();
		}
		return true, true;
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 1
		{
			
			
			// Too many gibs.
			if (!Event)
			{
				Destroy();	return;	
			}
			
			bool soft, hard;
			[hard, soft] = Event.CheckGibCount();
			
			if (!hard)
			{
				Destroy();	return;
			}
			
			// Force simplification since we're at the softer limit.
			if (!soft)
				simple = true;
				
			
			
			DropItem di;   // di will be our drop item list iterator
			DropItem drop; // while drop stays as the reference point.
			
			drop = GetDropItems();
			if (!drop)	{	Destroy();	return;	}
			if (!simple && A_CheckSightOrRange(BloodDistanceLimit,"Null"))
				simple = true;
			
			bool first = true;
			for (di = drop; di != null; di = di.Next)
			{
				int Amount = di.Amount;
				int Prob = di.Probability;
				if (Amount == 0 || Prob < 1 || (simple && !first))	continue;
				
				if (Amount < 0)	Amount = 1;
			
				if (di.Name == 'None')
				{
					Destroy();
					return;
				}
				Class<Actor> Check = di.Name;
				if (!Check)
				{
					Console.Printf(di.Name..": bad actor");
					continue;
				}
							
				for (int j = 0; j < Amount; j++)
				{
					if (simple && !first)
						continue;
						
					if (Prob < random[rng](1,254))
						continue;
						
					first = false;
					let spawned = GibletBase(Spawn(Check, pos));
					// The target is intentionally set to this
					if (spawned)	
					{	
						spawned.Pitch = Pitch;
						spawned.Angle = Angle;
						spawned.Target = self; 
						spawned.Master = Master;
						spawned.Tracer = Tracer;
						spawned.ShortGibTime = ShortGibTime;
						
						Vector3 tvel = tracer ? tracer.vel : (0,0,0);
						spawned.A_ChangeVelocity(
							tvel.X * frandom(MulMin,MulMax) + frandom(-RAdd,RAdd),
							tvel.Y * frandom(MulMin,MulMax) + frandom(-RAdd,RAdd),
							tvel.Z * frandom(MulMin,MulMax) + frandom(-RAdd,RAdd),
							CVF_REPLACE);
						if (target)	spawned.P1 = (target.bloodcolor & 0xffffff);
						else		spawned.P1 = Color(255, 255, 0, 0);
					}
				}
			}
		}
		Stop;
	}
}

Class SmallGibDropper : GibSpawnerBase
{
	Default
	{
		DropItem "HGib1Small", 255, 1;
		DropItem "HGib2Small", 255, 1;
		DropItem "HGib3Small", 255, 1;
	}
}

Class GibDropper : GibSpawnerBase
{
	Default
	{
		DropItem "HGib1", 255, 1;
		DropItem "HGib2", 255, 1;
		DropItem "HGib3", 255, 1;
	}
}

Class GibDropperShort : GibDropper
{	Default { GibSpawnerBase.ShortGibTime true;	}	}

Class QuakeGibDropper : GibSpawnerBase
{
	Default
	{
		DropItem "Gib1", 		255, 1;
		DropItem "Gib2", 		255, 1;
		DropItem "Gib1", 		48, 5;
		DropItem "Gib2", 		48, 5;
		DropItem "GibTorso", 	255, 1;
	}
	/*
	override void PostBeginPlay()
	{
		int a1 = random(3,6);
		int a2 = random(1, a1 - 1);
		a2 = a1 - a2;
		
		Gam01 = a1;
		Gam02 = a2;
		Super.PostBeginPlay();
	}
	*/
}

Class QuakeGibDropperShort : QuakeGibDropper
{	Default { GibSpawnerBase.ShortGibTime true;	}	}

Class QuakeSmallGibDropper : GibSpawnerBase
{
	Default
	{
		DropItem "SmallGib1",		255, 1;
		DropItem "SmallGib2",		255, 1;
		DropItem "SmallGibTorso",	255, 1;
	}
	/*
	override void PostBeginPlay()
	{
		if (A_CheckSightOrRange(BloodDistanceLimit,"Null"))
		{	Destroy();	return;	}
		int a1 = random(3,5);
		int a2 = random(1, a1 - 1);
		a2 = a1 - a2;
		
		Gam01 = a1;
		Gam02 = a2;
		Super.PostBeginPlay();
	}
	*/
}

Class BloodGibDropper : GibSpawnerBase
{
	Default
	{
		GibSpawnerBase.RAdd 7;
		DropItem "NewMeat",		255, 2;
		DropItem "BloodGib1",	255, 1;
		DropItem "BloodGib2",	255, 1;
		DropItem "BloodGib3",	255, 1;
		DropItem "BloodGib4",	255, 1;
	}
	/*
	override void PostBeginPlay()
	{
		if (A_CheckSightOrRange(BloodDistanceLimit,"Null"))
		{	Destroy();	return;	}
		
		Gam01 = 6;
		Gam02 = random(1,3);
		Gam03 = random(1,3);
		Gam04 = random(1,3);
		Gam05 = random(1,3);
		Super.PostBeginPlay();
	}
	*/
}

//==============================================================================
//==============================================================================
// The Gibs
//==============================================================================
//==============================================================================

//==============================================================================
// Giblet Bases for inheritance purposes.
//==============================================================================

Class GibletBase : AEoDFX 
{
	//AEoDGlobals g;
	AEoDHandler Event;
	int user_spawntrail;
	Color P1;
	int WaitTime;
	bool ShortGibTime;
	StateLabel next;
	
	Property WaitTimer: WaitTime;
	Property ShortGibTime: ShortGibTime;
	Default 
	{
		GibletBase.WaitTimer 300;
		GibletBase.ShortGibTime false;
		Projectile;
		+THRUACTORS
		-NOLIFTDROP
		+NOTELEPORT
		+NOTELESTOMP
		+NOTONAUTOMAP
		+NOTRIGGER
		-NOGRAVITY
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+DOOMBOUNCE
		Radius 6;
		Height 5;
		BounceFactor 0.45;
		DistanceCheck "user_MaxDrawDistance";
	}
	
	override void BeginPlay()
	{	
		Actor.BeginPlay();
		user_spawntrail = GetCvar("SpawnBloodTrails");
	}
	
	void SpawnGibBloodTrail()
	{
		if (user_spawntrail && !A_CheckSightOrRange(BloodDistanceLimit,"Null"))
		{	
			A_FaceMovementDirection();
			let blood = MCBloodFXMain(Spawn("MCBloodFXMain",pos));
			if (blood)
			{
				blood.target = target;
				blood.master = master;
				blood.tracer = tracer;
				blood.pitch = pitch;
				blood.angle = angle;
				blood.vel = vel;
				blood.P1 = P1;
				
			}
		}
	}
	
	States
	{
	md1:
	Death:
	DeathReal:
		"####" "#" 1
		{
			WaitTime = (ShortGibTime || GetCvar("user_ShortGibLives")) ? 0 : Default.WaitTime;
			A_SetTics(WaitTime);
		}
		"----" A 1 A_FadeOut();
		Wait;
	}
}

//==============================================================================
//
//	A_TossGib with blood trails
//
//==============================================================================

Class NewMeat : GibletBase replaces Meat
{
	Default
	{
		GibletBase.WaitTimer 350;
		Radius 6;
		Height 5;	
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			sprite = GetSpriteIndex("MEAT");
			frame = random(0,19);
			WaitTime = 0;
		}
		//MEAT ABCDEFGHIJLKMNOPQRST 0 { return ResolveState("Play1"); }
	Play1:
		"####" "#" 2 
		{
			SpawnGibBloodTrail();
			StateLabel dest = null;
			
			if (pos.z <= floorz || WaitTime++ >= 87)
				dest = "Death";	
			
			return ResolveState(dest);
		}
		Wait;
	}
}

//==============================================================================
//Hexen2 style Gibs
//==============================================================================


Class HGib1Small : GibletBase
{
	Default
	{
		BounceFactor 0.4;
		Speed 4;
		Scale 0.07;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_ChangeVelocity(0,0,random(3,12));
			return ResolveState("Play");
		}
	Play:
		GIB7 AABBCCDDEEFFGGHHIIJJKKLLMM 2 SpawnGibBloodTrail();
		Goto Death;
	}
}


Class HGib1SmallMirr : HGib1Small
{
	Default
	{
		Speed 5;
	}
	States
	{
	Play:
		GIB7 NNOOPPQQRRSSTTUUVVWWXXYYZZ 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

Class HGib2Small : HGib1Small
{
	Default
	{
		Speed 6;
	}
	States
	{
	Play:
		GIB8 AABBCCDDEEFFGGHHIIJJKKLLMM 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

Class HGib2SmallMirr : HGib1Small
{
	Default
	{
		Speed 3;
	}
	States
	{
	Play:
		GIB8 NNOOPPQQRRSSTTUUVVWWXXYYZZ 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

Class HGib3Small : HGib1Small
{
	Default
	{
		Speed 2;
	}
	States
	{
	Play:
		GIB9 AABBCCDDEEFFGGHHIIJJKKLL 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

Class HGib3SmallMirr : HGib1Small
{
	Default
	{
		Speed 4;
	}
	States
	{
	Play:
		GIB8 NNOOPPQQRRSSTTUUVVWWXXYYZZ 2 SpawnGibBloodTrail();
		Goto Death;
	}
}
   

//***************************************************
//***************************************************


Class HGib1 : GibletBase
{
	Default
	{
		BounceFactor 0.4;
		Speed 4;
		Scale 0.1;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_ChangeVelocity(0,0,random(3,12));
			return ResolveState("Play");
		}
	Play:
		GIB7 AABBCCDDEEFFGGHHIIJJKKLLMM 2 SpawnGibBloodTrail();
		Goto Death;
	}
}
Class HGib1Mirr : HGib1
{
	Default
	{
		Speed 5;
	}
	States
	{
	Play:
		GIB7 NNOOPPQQRRSSTTUUVVWWXXYYZZ 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

Class HGib2 : HGib1
{
	Default
	{
		Speed 6;
	}
	States
	{
	Play:
		GIB8 AABBCCDDEEFFGGHHIIJJKKLLMM 2 SpawnGibBloodTrail();
		Goto Death;
	}
}


Class HGib2Mirr : HGib1
{
	Default
	{
		Speed 5;
	}
	States
	{
	Play:
		GIB8 NNOOPPQQRRSSTTUUVVWWXXYYZZ 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

Class HGib3 : HGib1
{
	Default
	{
		Speed 6;
	}
	States
	{
	Play:
		GIB9 AABBCCDDEEFFGGHHIIJJKKLL 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

Class HGib3Mirr : HGib1
{
	Default
	{
		Speed 5;
	}
	States
	{
	Play:
		GIB9 MMNNOOPPQQRRSSTTUUVVWWXX 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

//===============================================================================
//===============================================================================
//
//	Quake gibs
//
//===============================================================================
//===============================================================================

//***********************************
Class Gib1 : GibletBase
{
	Default
	{
		BounceFactor 0.45;
		Speed 8;
		Scale 0.34;
	}
	States
	{
	Spawn:
		Q99B B 0 NoDelay 
		{
			A_ChangeVelocity(0,0,random(3,12));
			return ResolveState("Play");
		}
	Play:
		Q99B BBCCDDEEFFGGHHIIJJKKLLMMNN 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

Class GibTorso : Gib1
{
	Default
	{
		Speed 2;
		Scale 0.31;
	}
	States
	{
	Play:
		Q99C AABBCCDDEEFF 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

Class Gib2 : Gib1
{
	Default
	{
		Speed 5;
		Scale 0.26;
	}
	States
	{
	Play:
		Q99D AABBCCDDEE 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

//==================================================================


//***********************************
Class SmallGib1 : Gib1
{
	Default
	{
		Speed 8;
		Scale 0.27;
	}
	States
	{
	Play:
		Q99B BBCCDDEEFFGGHHIIJJKKLLMMNN 2 SpawnGibBloodTrail();
		Goto Death;
	}
}

Class SmallGibTorso : SmallGib1 
{
	Default
	{
		Speed 2;
		Scale 0.23;
	}
	States
	{
	Play:
		Q99C AABBCCDDEEFF 2 SpawnGibBloodTrail();
		Goto Death;
	}
}


Class SmallGib2 : SmallGib1 
{
	Default
	{
		Speed 5;
		Scale 0.19;
	}
	States
	{
	Play: //ThrustThingZ(0,random(10,60),0,1)
		Q99D AABBCCDDEE 2 SpawnGibBloodTrail();
		Goto Death;
	}
}


//===============================================================================
//===============================================================================
//
//	Blood style gibs
//
//===============================================================================
//===============================================================================

//***************************************
Class BloodGib1 : GibletBase
{
	int user_c;
	Default
	{
		Scale 0.6;
		Radius 6;
		Height 5;
	}
	States
	{
	Spawn:
		ANYG A 0 NoDelay 
		{
			//ThrustThingZ(0,random(12,80),0,1);
			A_ChangeVelocity(0,0,random(3,12));
			return ResolveState("Looping");
		}
	Looping:
		ANYG AABBCCDD 2 SpawnGibBloodTrail();
		"####" "#" 0 
		{
			if (user_c++ > 5)
			{
				Frame = Fr_E;
				next = "Death";
			}
			return ResolveState(next);
		}
		Loop;
	}
}

Class BloodGib2 : BloodGib1		//eye
{
	Default
	{
		Scale 0.4;
		Speed 7;
	}
	States
	{
	Looping:
		ANYG FFGGHHII 2 SpawnGibBloodTrail();
		"####" "#" 0 
		{
			if (user_c++ > 5)
			{
				next = "Death";
				Frame = Fr_J;
			}
			return ResolveState(next);
		}
		Loop;
	}
}

Class BloodGib3 : BloodGib1		//liver
{
	Default
	{
		Scale 0.6;
		Speed 7;
	}
	States
	{
	Looping:
		ANYG KKLLMMNN 2 SpawnGibBloodTrail();
		"####" "#" 0 
		{
			if (user_c++ > 5)
			{
				next = "Death";
				Frame = Fr_O;
			}
			return ResolveState(next);
		}
		Loop;
	}
}

Class BloodGib4 : BloodGib1		//bloodthing
{
	Default
	{
		Scale 0.6;
		Speed 7;
	}
	States
	{
	Looping:
		ANYG PPQQRRSS 2 SpawnGibBloodTrail();
		"####" "#" 0 
		{
			if (user_c++ > 5)
			{
				next = "Death";
				Frame = Fr_T;
			}
			return ResolveState(next);
		}
		Loop;
	}
}

//==============================================================================
//==============================================================================


//==============================================================================
//==============================================================================

Class GibletBaseSpawner : AEoDFX 
{	
//	Color P1;
	Default 
	{
		+NOTELESTOMP
		+NOTONAUTOMAP
		+NOINTERACTION
		+NOBLOCKMAP
		RenderStyle "None";
		Radius 1;
		Height 1;
		DistanceCheck "user_MaxDrawDistance";
	}
}

Class NewJunk : Junk replaces Junk
{
	Color P1;
	Default
	{
		+NOTELESTOMP
		+THRUACTORS
		+NOTONAUTOMAP
		DistanceCheck "user_MaxDrawDistance";
	}
}


//***********************************
Class GreenGib : GibletBaseSpawner
{
	Default
	{
		Translation "32:47=123:127", "169:191=112:127";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_CheckSight(2);
		TNT1 AA 0 A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
		Stop;
	Spawn2:
		TNT1 A 0 A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
		Stop;
	}
}

Class GreenGibSp : GreenGib
{
	Default
	{
		Translation "32:47=123:127", "169:191=112:127";
		BloodColor "Green";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_CheckSight("Spawn2");
		TNT1 AAAAAAAA 0 
		{
			A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
			A_TossGib();
		}
		TNT1 A 0 
		{
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
		}
		Stop;
	Spawn2:
		TNT1 AA 0
		{
			A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
			A_TossGib();
		}
		TNT1 A 0 
		{
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
		}
		Stop;
	}
}

//***********************************
Class BlueGib : GibletBaseSpawner
{
	Default
	{
		Translation "32:47=204:207", "169:191=196:205";
		BloodColor "Blue";
	}
	States
	{
	Spawn:
		TNT1 A 0 ;
		TNT1 A 0 A_CheckSight("Spawn2");
		TNT1 AA 0 A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
		Stop;
	Spawn2:
		TNT1 A 0;
		Stop;
	}
}

Class BlueGibSp : BlueGib
{
	Default
	{
		Translation "32:47=204:207", "169:191=196:205";
		BloodColor "Blue";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_CheckSight("Spawn2");
		TNT1 AAAAAAAA 0 
		{
			A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
			A_TossGib();
		}
		TNT1 A 0 
		{
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
		}
		Stop;
	Spawn2:
		TNT1 AA 0
		{
			A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
			A_TossGib();
		}
		TNT1 A 0 
		{
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
		}
		Stop;
	}
}


//***********************************
Class OrangeGib : GibletBaseSpawner
{
	Default
	{
		Translation "32:47=219:223", "169:191=213:223";
		BloodColor "Orange";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_CheckSight("Spawn2");
		TNT1 A 0 A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
		TNT1 A 0 A_TossGib();
		Stop;
	Spawn2:
		TNT1 A 0 A_TossGib();
		Stop;
	}
}

Class OrangeGibSp : GreenGib
{
	Default
	{
		Translation "32:47=219:223", "169:191=213:223";
		BloodColor "Orange";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_CheckSight("Spawn2");
		TNT1 AAAAAAAA 0 
		{
			A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
			A_TossGib();
		}
		TNT1 A 0 
		{
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
		}
		Stop;
	Spawn2:
		TNT1 AA 0
		{
			A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
			A_TossGib();
		}
		TNT1 A 0 
		{
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
		}
		Stop;
	}
}


//***********************************
Class GrayGib : GibletBaseSpawner
{
	Default
	{
		Translation "32:47=104:111", "169:191=80:106";
		BloodColor "Gray";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_CheckSight("Spawn2");
		TNT1 AA 0 A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
		Stop;
	Spawn2:
		TNT1 A 0 A_TossGib();
		Stop;
	}
}

Class GrayGibSp : BlueGib
{
	Default
	{
		Translation "32:47=104:111", "169:191=80:106";
		BloodColor "Gray";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_CheckSight("Spawn2");
		TNT1 AAAAAAAA 0 
		{
			A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
			A_TossGib();
		}
		TNT1 A 0 
		{
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
		}
		Stop;
	Spawn2:
		TNT1 AA 0
		{
			A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
			A_TossGib();
		}
		TNT1 A 0 
		{
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
		}
		Stop;
	}
}

//***********************************
Class PurpleGib : GibletBaseSpawner
{
	Default
	{
		Translation "32:47=254:254", "169:191=253:253";
		BloodColor "Purple";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_CheckSight(2);
		TNT1 A 0 A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
		TNT1 A 0 A_TossGib();
		Stop;
	Spawn2:
		TNT1 A 0 A_TossGib();
		Stop;
	}
}

Class PurpleGibSp : GreenGib
{
	Default
	{
		Translation "32:47=254:254", "169:191=253:253";
		BloodColor "Purple";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_CheckSight("Spawn2");
		TNT1 AAAAAAAA 0 
		{
			A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
			A_TossGib();
		}
		TNT1 A 0 
		{
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
		}
		Stop;
	Spawn2:
		TNT1 AA 0
		{
			
			A_SpawnItemEx("NewMeat",0,0,random(10,40),random(-7,7),random(-7,7),random(1,16),random(1,359),GibFlags);
			A_TossGib();
		}
		TNT1 A 0 
		{
			A_SpawnItemEx("BloodGib3",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
			A_SpawnItemEx("BloodGib4",0,0,0,random(-7,7),0,0,random(1,359),GibFlags);
		}
		Stop;
	}
}