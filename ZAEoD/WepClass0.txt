Class SoulReaperBeam : Actor
{
	const minDist = 64 ** 2;
	const closestCon = 500 ** 2;
	int seekflags;
	
	Actor closest;
	double closestDist;
	bool skip;
	
	AEoDHandler Event;
	
	Default
	{
		Projectile;
		+SEEKERMISSILE
		+DONTREFLECT
		+FOILINVUL
		+HITTRACER
		+PAINLESS
		+SCREENSEEKER
		+DONTSPLASH
		+NOTIMEFREEZE
		+NODAMAGETHRUST 
		+CANNOTPUSH
		+EXTREMEDEATH
		Speed 4;
		Radius 4;
		Height 4;
		Damage 0;
		DamageType "SoulReaperPull";
		//MaxTargetRange 4
		RenderStyle "None";
	}
	
	override void OnDestroy()
	{
		if (skip)	
		{	Super.OnDestroy(); return; }
		
		if (tracer && tracer != target)
		{
			if (tracer && tracer.bSHOOTABLE && tracer.health > 0)
			{
				int dmg = random(1,2);
				Vector3 SoulPos = tracer.pos;
					SoulPos.z = pos.z;
					
				int ret = tracer.DamageMobj(self, target, dmg, "SoulReaperPull", DMG_FOILINVUL | DMG_THRUSTLESS);
				if (!tracer || tracer.health < 1)
				{
					let ms = tracer.Spawn("DMSoulMissile", SoulPos);
					if (ms)
					{
						ms.target = target;
						ms.master = master;
						ms.tracer = tracer;
					}
				}
			}
		}
		Super.OnDestroy();
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		if (!victim || (victim.bSOLID && !victim.bSHOOTABLE))	return 1;
		return -1;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (target)	pitch = target.pitch;
	}
	
	void SpawnTrail()
	{
		//user_s = random(1,5)
		//user_r = random(0,359)
		//A_ChangeVelocity(0,cos(-user_r)*(user_s + frandom(0.1,0.5)),sin(user_r)*(user_s + frandom(0.1,0.5)),CVF_RELATIVE|CVF_REPLACE)
		int rng = random(1,3);
		for (int i = 0; i < rng; i++)
		{
			double s = frandom(1.0,5.0);
			double r = frandom(0,359);
			A_SpawnParticle("Green",SPF_FULLBRIGHT|SPF_RELATIVE|SPF_NOTIMEFREEZE,9,frandom(5.0, 8.0), 0, 0, 0, 0, 
				0,
				 cos(r) * (s + frandom(0.1, 0.5)) * 0.65,
				-sin(r) * (s + frandom(0.1, 0.5)) * 0.65);
		}
	}
	
	States
	{
	Spawn:
		TNT1 A 1 NoDelay 
		{
			skip = false;
			int maxTime = 100;
			closestDist = closestCon;
			closest = null;
			
			
			
			Actor mo = null;
			
			if (Event)
			{
				for (int i = 0; i < Event.Souls.Size(); i++)
				{
					mo = Event.Souls.Actors[i];
					if (!mo || mo.bKILLED)	continue;
					
					double dist = Distance3DSquared(mo);
				
					if (dist > closestDist)
						continue;
					
					if (!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
						continue;
						
					closest = mo;
					closestDist = dist;
				}
			}
			/*
			ThinkerIterator it = ThinkerIterator.Create("DMSoulFragment",STAT_SOULS);
			while (mo = Actor(it.Next()))
			{
				double dist = Distance3DSquared(mo);
				
				if (dist > closestDist)
					continue;
				
				if (!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
					continue;
					
				closest = mo;
				closestDist = dist;
			}
			*/
			if (closest)
			{
				bTHRUACTORS = true;
				while (Distance3DSquared(closest) > minDist)
				{
					if (!closest || maxTime < 1)		
					{
						skip = true;
						Destroy(); 
						return;
					}
					if (maxTime % 5 == 0)
						SpawnTrail();
						//A_SpawnItemEx("SoulReaperBeamTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
					A_Face(closest,2,2,0,0,FAF_BOTTOM);
					
					A_Warp(DefPtr, cos(pitch) * speed, 0, -sin(pitch) * speed, 0, WARPF_NOCHECKPOSITION);
					maxTime--;
				}
				
				let ms = closest.Spawn("DMSoulMissile", closest.pos);
				if (ms)
				{
					ms.target = target;
					ms.tracer = tracer;
					ms.master = master;
					ms.translation = closest.translation;
					closest.Destroy();
				}
				skip = true;
			}
			else
			{
				while (maxTime > 0)
				{
					if (maxTime % 5 == 0)
					{
						//A_SpawnItemEx("SoulReaperBeamTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
						SpawnTrail();
						if (!tracer || tracer.health < 1) 
						{
							tracer = null;
							A_SeekerMissile(1,1,SMF_PRECISE|SMF_LOOK,256,4);
						}
					}
					
					if (tracer)	A_FaceTracer(2,2,0,0,FAF_MIDDLE);
					
					Vector3 move = (cos(pitch) * speed, 0, -sin(pitch) * speed);
					bool check1 = (!A_Warp(AAPTR_DEFAULT, move.x, 0, move.z, 0,0,"Null"));
					bool check2 = check1 || (tracer && Distance3DSquared(tracer) < minDist);
					
					if (check1 || check2)
					{
						A_FaceTracer(0,0);
						if (check1)
							A_CheckBlock("Null", CBF_SETTRACER|CBF_NOLINES, AAPTR_DEFAULT, move.x, 0, move.z);
						
						bNOINTERACTION = true;
						skip = (tracer == null);
						return;
					}
					
					maxTime--;
				}
			}
		}
		TNT1 A 1;
		Stop;
	Death:
		TNT1 A 1; // { skip = true; }
		Stop;
	Crash:
	XDeath:
		TNT1 A 1; // { skip = false; }
		Stop;
		
	}
}
/*
Class SoulReaperBeamTrail : Actor
{
	int user_s;
	int user_r;
	int user_t;
	Default
	{
		Projectile
		+NODAMAGE
		+NOINTERACTION
		+NOTIMEFREEZE
		+SEEKERMISSILE
		Translation "0:255=%[0,0,0]:[0,1,0]";
		RenderStyle "Add";
		Scale 0.05;
		Alpha 0.25;
		Speed 0;
	}
	States
	{
	Spawn:
		X099 A 0 NoDelay A_SetUserVar(user_t,tid)
		X099 A 0 Thing_ChangeTID(0,0)
		X099 A 0 A_SetUserVar(user_s,random(1,5))
		X099 A 0 A_SetUserVar(user_r,random(0,359))
		X099 A 0 A_JumpIf(user_t > 0,"Specialty")
		X099 A 0 A_SetScale(frandom(0.03,0.06))		
		X099 A 0 A_SpawnItemEx("SoulReaperBeamTrail",-4.5,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,1)
		X099 A 0 A_SpawnItemEx("SoulReaperBeamTrail",-2.5,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,1)
		X099 A 0 A_SeekerMissile(10,10,SMF_PRECISE)
		X099 A 0 A_SpawnItemEx("SoulReaperBeamTrail",2.5,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,1)
		Goto Looping
	Specialty:
		X099 A 0 A_SetScale(ScaleX*frandom(0.02,0.04))
	Looping:
		X099 A 0
		X099 A 1 Bright A_FadeOut(0.025)
		Wait
	}
}*/

extend class AEoDWeaponBase
{
	AEoDHandler Event;
}

extend class AEoDWeaponSlot10
{
	action int A_FireApocalypseSpray(
		int dmg, double distance = 1024, double fulldist = 256, double conesize = 55.0)
	{
		// Make sure there's a weapon first.
		Weapon weapon = player.ReadyWeapon;
		if (!weapon || !weapon.DepleteAmmo(weapon.bAltFire))	
			return 0;
			
		A_GunFlash();
		A_SetBlend("DarkRed",0.4,50);
		
		// Now, check the player's aiming methods.
		// 0 & 1 we don't care about.
		// 2 = Don't damage allies.
		// 3 = Don't damage non-monsters unless there aren't any.
		CVar CSmartAim = Cvar.GetCvar("sv_smartaim", player);
		int SmartAim = 0;
		if (CSmartAim)	SmartAim = CSmartAim.GetInt();
		int count = 0;
		
		// Convert the conesize, and set up an array for targets to damage.
		conesize = cos(conesize);
		Array<Actor> Targets;	
		Targets.Clear();
		
		// Iterate through all actors on STAT_DEFAULT.
		let it = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			if (!mo.bICECORPSE)
			{
				if (SmartAim > 1 && mo.bFRIENDLY && mo.bISMONSTER)
					continue; // Player wants to not hit friendlies.
				if ((mo.health < 1 || (!mo.bSHOOTABLE && !mo.bVULNERABLE)))
					continue; // Dead or not shootable.
			}
			double dist = Distance3DSquared(mo);
			if (dist >= (distance ** 2))
				continue; // Too far away.
				
			if (!CheckSight(mo, SF_IGNOREWATERBOUNDARY|SF_IGNOREVISIBILITY))
				continue; // Can't see it due to level blocking vision.
			
			Vector3 forw = ( cos(angle) * cos(pitch), sin(angle) * cos(pitch), -sin(pitch) );
			Vector3 offs = Vec2OffsetZ(0, 0, player.viewz);		// Account for the view height
			Vector3 epos = mo.Vec3Offset(0, 0, mo.height * 0.5);
			Vector3 diff = LevelLocals.Vec3Diff(offs, epos);	// Internally does v2 - v1.
			double dl = diff.Length();
			if (dl != 0.0)
			{
				double cone = (forw dot diff) / dl;
				if (cone <= conesize) // Outside 'conesize' degrees.
					continue;
			}
			Targets.Push(mo);
		}
		// Nothing to hit.
		if (Targets.Size() < 1)	return 0;
		
		// Check if the player wants to avoid hitting objects if monsters are
		// ripe for damaging, and remove all non-monsters.
		if (SmartAim > 2)
		{
			bool FoundMonsters = false;
			for (int i = 0; i < Targets.Size(); i++)
			{
				mo = Targets[i];
				if (!mo)	{	Targets.Delete(i); i--;	continue;	}
				if (!FoundMonsters && mo.bISMONSTER)
				{
					FoundMonsters = true;
					break;
				}
			}
			// Found some monsters. Remove non-monsters now.
			if (FoundMonsters)
			{
				for (int i = 0; i < Targets.Size(); i++)
				{
					mo = Targets[i];
					if (!mo || !mo.bISMONSTER)
					{
						Targets.Delete(i);
						i--;
					}
				}
			}
			Targets.ShrinkToFit();
			if (Targets.Size() < 1)	return 0;
		}
		
		// Now dish out the damage.
		for (int i = 0; i < Targets.Size(); i++)
		{
			mo = Targets[i];
			if (!mo)	continue;
			
			// Spawn the effect.
			let apoc = Actor.Spawn("ApocSprayPlayer", mo.pos, ALLOW_REPLACE);
			if (!apoc)	continue;
			apoc.Angle = AngleTo(apoc);
			
			// Similar to A_Explode's calculations. GetRadiusDamage will do the
			// distance falloff stuff for us and use the returned damage.
			int damage = GetRadiusDamage(mo, dmg, distance, fulldist);
			if (damage > 0)
			{	
				// Now take that damage and open up a can of Whoopie Goldass!
				mo.DamageMobj(apoc, self, damage, apoc.DamageType, DMG_FOILINVUL|DMG_USEANGLE, apoc.Angle);
				count++;
			}
		}
		Targets.Clear();
		return count;
	}
}

//==============================================================================
//==============================================================================
//							HELL and HEAVEN's hand
// Nobody was sure of its existance, some people thought it was a myth, others 
// said it was a rumor, but the only thing they were sure of, was its power. 
// Destruction and massacre surrounds the name, and the long history of this 
// device. Being half sacred and half wretched, this weapon can protect the 
// user and give to it an amazing amount of destructive power. Rumors have it, 
// only one being was capable of using the true power of this weapon, a creature
// that remains in the shadows, waiting for the moment to finally arise.

// Without one influence, the other would dominate and destroy the holder. Three
// massive powers twist maddeningly inside the weapon, with its upholstry and
// physical manifestations being that of Life. Constructed from bone, and flesh
// of uncountable species throughout the universe, their essence of life is used
// to hold within the third essence of Death while the purest holy and raw
// unholy powers contend with each other. 

// The Hand of God has shown that it is merely the smallest of gateways, touched 
// by God Himself, which radiates with his wrath against the unruly. Apparently, 
// this device manages to utilize that same ability to wrench open the gate a 
// little further, allowing so much more of His anger out, slamming the heathen 
// with unmatched and infinitely more terrifying strength. Only the purest of
// beings will not be ravaged by His fury.

// For the protection, only the Dark One has proven to know how to mitigate God's
// Wrath (if even a little), as Lucifer was once a grand arch-angel. As the 
// champion of Darkness, only God can get through his protective abilities. The
// tiny drop of Darkness imbued within combines to further the user's protection,
// reflecting most projectiles while completely rendering them invulnerable and
// immortal, the sheer undefeatable object so long as the protection is present.
// Lucifer's unholy gaze is directly on the user, bringing to bear pain to anyone
// who gets too close.

// Lastly, Death's aspect knows where to hit them where it hurts. By channelling 
// spirits of vengeance with untold knowledge, they can penetrate through any
// shield and cut down any foe, save for the one it gave this power to originally.

// The Death Bringer's sigil can be switched at any time to change modes, and his
// hand guides the user as if they have had all his experience with it. With only
// the conscience of the wearer, (s)he alone will control the fate of the outcome
// at long last...
//==============================================================================
//==============================================================================
// Graphics edit by Major Cooke
//==============================================================================
//==============================================================================

Class AEoDHellHeavenHandItem : AEoDWeaponPickup //6066
{
	Default
	{
		+FLOORCLIP
		+INVENTORY.IGNORESKILL	
		+DONTGIB
		Inventory.Amount 1;
		Inventory.PickupSound "DMage/death";
		Inventory.PickupMessage "You are now worthy of the Great one's strength, the Dark one's protection, and the Eternal one's knowledge! Behold the HELL AND HEAVEN HAND!";
	}
	States
	{
	Spawn:
		HELG A -1;
		Loop;
	Pickup:
		TNT1 A 0 A_TakeInventory("HHHModeChecker",20);
		TNT1 A 0 A_JumpIfInventory("AEoDHellHeavenHand",1,"Ammo");
		TNT1 A 0 A_JumpIf(CallACS("WeaponSlotLimitCheck",0) <= 0,"Nothing");
		TNT1 A 0 A_GiveInventory("Weapon0Count",1);
		TNT1 A 0 A_GiveInventory("HellHeavenHandDrop",1);
		TNT1 A 0 A_GiveInventory("AEoDHellHeavenHand",1);
		TNT1 A 0 A_PrintBold("\cgSlot 10: Hell & Heaven Hand");
		Stop;
	Nothing:
		TNT1 A 0 A_JumpIfInventory("AEoDHellHeavenHand",1,"Ammo");
		TNT1 A 0 A_JumpIfInventory("LimitScriptActive",1,1);
		Goto Pickup+3;
		
		TNT1 A 0 
		{
			ACS_NamedExecute("s798",0,0,160,0);
			return false;
		}
		Fail;
	Ammo:
		TNT1 A 0 A_GiveInventory("AEoDHellHeavenHand",1);
		Stop;
	}
}

Class AEoDHellHeavenHand : AEoDWeaponSlot10 // 6066
{
	const ProtectionDamageDistance = 256 ** 2;
	const Overlay_Protection = 331;
	private bool		HHH_Protection;
	private double		HHH_Volume;
	private int 		HHH_Timer;
	Default
	{
		+FLOORCLIP
		+DONTGIB
		+INVENTORY.IGNORESKILL
		+INVENTORY.FANCYPICKUPSOUND
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.ALT_AMMO_OPTIONAL
		+WEAPON.NOAUTOFIRE
		Weapon.AmmoType "RedMana";
		Weapon.AmmoType2 "DarkMana";
		Weapon.AmmoGive1 200;
		Weapon.AmmoGive2 100;
		Weapon.AmmoUse 50;
		Weapon.AmmoUse2 1;
		Weapon.SelectionOrder 19999;
		Weapon.UpSound "weapons/draw";
		Inventory.PickupSound "DMage/death" ;
		Inventory.PickupMessage "You are now worthy of the Great one's strength, the Dark one's protection, and the Eternal one's knowledge! Behold the HELL AND HEAVEN HAND!";
		Obituary "%o was judged by %k, and has been deemed unworthy.";
		Tag "Hell and Heaven Hand";
	}
	
	
	
	private action void SetProtection(bool on)
	{
		let i = invoker;
		let o = i.owner;
		if (!o || o.health < 1)	return;
		
		o.bDONTTHRUST = on;
		o.bNOPAIN = on;
		i.HHH_Protection = on;
		if (on)
		{
			o.SetInventory("PowerPlayerGrounder", 1);
			o.SetInventory("Unrideable", 1);
			o.SetInventory("HHHCheck", 1);
			o.bINVULNERABLE = true;
			o.bREFLECTIVE = true;
			o.bDONTRIP = true;
			o.bNODAMAGE = true;
			if (i.HHH_Volume <= 0.0)
			{
				i.HHH_Volume = 0.05;
				o.A_PlaySound("HHH/fire2main",	5, i.HHH_Volume, true);
				o.A_PlaySound("HHH/fire2chant",	6, i.HHH_Volume, true);
				o.A_PlaySound("HHH/DemonMorph",	7, i.HHH_Volume, true);
			}
		}
		else if (!CountInv("PowerDemonMorph"))
		{
			o.SetInventory("PowerPlayerGrounder", 0);
			o.SetInventory("Unrideable", 0);
			o.SetInventory("HHHCheck", 0);
			
			let inv = PowerInvulnerable(o.FindInventory('PowerInvulnerable', true));
			if (!inv)	o.bINVULNERABLE = false;
			if (!o.CountInv('PowerDLProtector'))
			{
				o.bREFLECTIVE = false;
				if (!inv)	o.bNODAMAGE = false;
			}
			if (!o.CountInv('PowerNoSeek'))
				o.bDONTRIP = false;
		}
	}
	
	// Used by the overlay to adjust volume, give health + armor, and damage enemies.
	private action void ProtectionTick()
	{
		let i = invoker;
		let o = i.owner;
		if (!o || o.health < 1)	return;
		
		
		
		bool UpdateVol = false;
		if (i.HHH_Protection)
		{
			i.HHH_Timer++;
			
			// Every 12 ticks, damage nearby enemies and 
			Switch(i.HHH_Timer)
			{
				Case 12:
				Case 24:
				Case 36:
				{
					o.A_GiveInventory("HHHHealth",1);
					if (o.CountInv("BasicArmor") >= 664)
					{	o.A_GiveInventory("UltimateArmor",1);	}
					else
					{	o.A_GiveInventory("HHHArmor",2);	}
					A_FireProjectile("ProtectionShover", 0, 0, 0, 0);
					
					/*
					if (!i.Event)	i.Event = AEoDHandler.Fetch();
					if (i.Event)
					{
						int size = i.Event.Monsters.Size();
						if (size > 0)
						{
							bool x = (o.bEXTREMEDEATH);
							o.bEXTREMEDEATH = true;
							for (int i = 0; i < size; i++)
							{
								//A_Explode(50,256,0,0,128);
								Actor mo = i.Event.Monsters.Actors[i];
								if (!mo || mo.health < 1 || (!mo.bSHOOTABLE && !mo.bVULNERABLE) ||
									!o.CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
									continue;
								
								int dmg = o.GetRadiusDamage(mo,50, 256, 128, bOLDRADIUSDMG);
								if (dmg > 0)
									mo.DamageMobj(null, o, dmg, "Unholy", DMG_NO_PAIN);
							}
							o.bEXTREMEDEATH = x;
						}
					}
					*/
				}
				Default:
					break;
			}
			
			if (i.HHH_Timer > 36)
			{
				o.A_TakeInventory(i.AmmoType2, i.AmmoUse2, TIF_NOTAKEINFINITE);
				i.HHH_Timer = 1;
			}
			if (i.HHH_Volume < 1.0)
			{
				i.HHH_Volume += 0.05;
				UpdateVol = true;
				
			}
		}
		else
		{
			if (i.HHH_Volume > 0.0)
			{
				i.HHH_Volume -= 0.05;
				UpdateVol = true;
			}
			else
			{
				for (int j = 5; j < 8; j++)
					o.A_StopSound(j);
			}
		}
	//	Console.Printf("%2f", i.HHH_Volume);
	//	i.SetOrigin(o.pos, false);
		if (UpdateVol)
		{
			i.HHH_Volume = Clamp(i.HHH_Volume, 0.0, 1.0);
			for (int j = 5; j < 8; j++)
				o.A_SoundVolume(j, i.HHH_Volume);
		}
	}
	
	action bool HasAmmo()
	{
		let o = invoker.owner;
		bool inf = (sv_infiniteammo || o.CountInv("DarkMana") > 0 || invoker.HHH_Timer > 1);
		if (!inf)
		{
			let inv = PowerInfiniteAmmo(o.FindInventory('PowerInfiniteAmmo', true));
			inf = (inv != null);
		}
		return inf;
	}
	
	action void SetInvulnerable(bool on)
	{
		let o = invoker.owner;	
		if (!o) return;
		
		if (on)	o.bINVULNERABLE = true;
		else
		{
			let inv = PowerInvulnerable(o.FindInventory('PowerInvulnerable', true));
			if (!inv)	o.bINVULNERABLE = false;
		}
	}
	
	States
	{ 
	Spawn: 
		HELG A 10;
		Loop;
	Ready: 
		UNK1 A 0 
		{
			SetProtection(false);
			int count = CountInv("HHHModeChecker");
			
			StateLabel 				next = "ReadyKnowledge";
				 if (count == 1)	next = "ReadyStrength";
			else if (count >  1)	next = "ReadyProtection";
			return ResolveState(next);
		}
	//	UNK1 A 0 A_JumpIfInventory("HHHModeChecker",2,4); //Jump to Protection side
	//	UNK1 A 0 A_JumpIfInventory("HHHModeChecker",1,2); //Jump to Strength side

	ReadyKnowlege:		UNK1 D 0 { return ResolveState("VReady"); } //Knowledge side lit
	ReadyStrength:		UNK1 C 0 { return ResolveState("VReady"); } //Strength side lit
	ReadyProtection:	UNK1 B 0 { return ResolveState("VReady"); } //Protection side lit
	VReady:
		---- A 1 
		{
			int flags = 0;
			A_Overlay(Overlay_Protection, "Overlay.Protection", true);
			
			// Protection phase handling.
			if (CountInv("HHHModeChecker") == 2)
			{
				flags |= WRF_NOPRIMARY;
			
				int input = GetPlayerInput(INPUT_BUTTONS);
				if ((input & BT_ATTACK) && HasAmmo())
				{
					//flags |= (WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB);
					return ResolveState("FireProtection");
				}
			}
			A_WeaponReady(flags);
			return ResolveState(null);
		}
		Wait;
	Overlay.Protection:
		TNT1 A 1 ProtectionTick();
		Wait;
	Deselect:
		UNK2 B 0 
		{
			SetProtection(false);
			invoker.HHH_Volume = 0.0;
		}
	Desel2:
		UNK1 A 1 A_Lower();
		UNK1 A 1 A_Lower(18);
		Wait;
	Select:
		UNK1 A 0 { invoker.HHH_Volume = 0.0; }
		UNK1 A 1 
		{
			A_Raise(18);
		}
		Wait;
	AltFire:
		UNK1 A 0 A_JumpIfInventory("HHHModeChecker",2,"ProtectionToKnowledge");
		UNK1 A 0 A_JumpIfInventory("HHHModeChecker",1,"StrengthToProtection");
		KnowledgeToStrength: //gives 1 checker
		UNK1 A 2 A_GiveInventory("HHHModeChecker",1);
		UNK1 C 0 A_PlaySound("hhh/modeswitch",CHAN_WEAPON,1,0);
		Goto Ready;
		StrengthToProtection: //now 2 checkers
		UNK1 A 2 A_GiveInventory("HHHModeChecker",1);
		UNK1 B 0 A_PlaySound("hhh/modeswitch",CHAN_WEAPON,1,0);
		Goto Ready;
		ProtectionToKnowledge: //no checkers
		UNK1 A 2 A_SetInventory("HHHModeChecker",0);
		UNK1 D 0 A_PlaySound("hhh/modeswitch",CHAN_WEAPON,1,0);
		Goto Ready;
	Fire:
		UNK2 A 0 A_JumpIfInventory("HHHModeChecker",2,"FireProtection");
		UNK2 A 0 A_JumpIfInventory("HHHModeChecker",1,"FireStrength");
		Goto FireKnowledge;
	FireKnowledge:
		UNK1 A 1 A_JumpIfInventory("RedMana",1,1);
		Goto Ready;
		
		UNK1 A 0 A_JumpIfInventory("PowerInvulBase",1,2);
		UNK1 A 0 A_SetInvulnerable();
		UNK1 A 0 A_GiveInventory("PowerEternalTimeFreeze",1);
		UNK1 A 0 A_PlaySound("hhh/charge1",CHAN_WEAPON | CHAN_LISTENERZ | CHAN_NOPAUSE,1,0);
		UNK1 EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 1 Bright A_FireProjectile("HHHKnowledgePSpawnerSingle",0,0,0,0);
		UNK1 EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 1 Bright A_FireProjectile("HHHKnowledgePSpawnerSingle",0,0,0,0);
		UNK1 EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 1 Bright A_FireProjectile("HHHKnowledgePSpawnerSingle",0,0,0,0); //111
		UNK1 GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 1 Bright A_FireProjectile("HHHKnowledgePSpawnerDouble",0,0,0,0); //35
		UNK2 F 4 Bright A_LightInverse();
		UNK2 F 2 
		{
			A_TakeInventory("PowerEternalTimeFreeze",1);
			A_PlaySound("hhh/channel2",CHAN_WEAPON | CHAN_LISTENERZ,1,1);
			A_Light0();
			SetInvulnerable(false);
			A_FireProjectile("EternalMissile",0,0);
		}
		UNK2 FFFFFFFFFFFFF 2 Bright A_FireProjectile("EternalMissile",0,0);
		UNK2 F 2 Bright A_FireProjectile("EternalMissile",0,1);
		UNK2 F 0 A_ReFire("KnowledgeHold");
		UNK2 F 5 bright
		{
			A_PlaySound("hhh/charge2", CHAN_WEAPON);
			SetInvulnerable(false);
		}
		UNK1 GE 5 bright;
		Goto Ready;
	KnowledgeHold:
		UNK2 FFF 2 Bright A_FireProjectile("EternalMissile",0,0);
		UNK2 C 0 A_ReFire("Hold2");
		Goto KnowledgeEnd;
	Hold2:
		UNK2 FFF 2 Bright A_FireProjectile("EternalMissile",0,0);
		UNK2 C 0 A_ReFire("Hold3");
		Goto KnowledgeEnd;
	Hold3:
		UNK2 FFF 2 Bright A_FireProjectile("EternalMissile",0,0);
		UNK2 C 0 A_ReFire("Hold4");
		Goto KnowledgeEnd;
	Hold4:
		UNK2 FFF 2 Bright A_FireProjectile("EternalMissile",0,0);
		UNK2 C 0 A_ReFire("Hold5");
		Goto KnowledgeEnd;
	Hold5:
		UNK2 FFF 2 Bright A_FireProjectile("EternalMissile",0,0);
		UNK2 C 0 A_ReFire("Hold6");
		Goto KnowledgeEnd;
	Hold6:
		UNK2 FF 2 Bright A_FireProjectile("EternalMissile",0,0);
		UNK2 F 2 Bright A_FireProjectile("EternalMissile",0,1);
		UNK2 C 0 A_ReFire("KnowledgeHold");
		Goto KnowledgeEnd;
	KnowledgeEnd:
		UNK2 C 0 
		{
			A_StopSound(CHAN_WEAPON);
			A_PlaySound("hhh/charge2", CHAN_WEAPON);
			A_JumpIfInventory("PowerInvulBase",1,2);
			
			let invul = PowerInvulnerable(FindInventory('PowerInvulnerable', true));
			if (!invul)	A_UnSetInvulnerable();
		}
		UNK1 FGE 5 bright;
		Goto Ready;
	
		
	FireProtection:
		UNK2 B 1
		{
			/*
			if (CountInv("DarkMana") || sv_infiniteammo || CountInv("PowerEconomizer") || CountInv("PowerInfiniteAmmo"))
				return ResolveState(1);
				
			let inf = PowerInfiniteAmmo(FindInventory('PowerInfiniteAmmo', true));
			if (inf)
				return ResolveState(1);
			return ResolveState(null);
			*/
			if ((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && HasAmmo())
			{
				SetProtection(true);
				return ResolveState(null);
			}
			return ResolveState("Ready");
		}
		Wait;
	/*	
		UNK2 B 0 A_SpawnItemEx("HHHAmmoTaker",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
		UNK2 B 0 A_JumpIfInventory("HHHAudioSpawned",1,"Audio2");
	Audio1:
		UNK2 B 0 A_GiveInventory("HHHAudioToken",2);
		UNK2 B 0 A_JumpIfInventory("HHHAudioSpawned",1,"Audio2");
		UNK2 B 0 A_SpawnItemEx("HHHProtectionAudio",3150,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
		UNK2 B 0 A_GiveInventory("HHHAudioSpawned",1);
		Goto FireProtC;
	Audio2:
		UNK2 B 0 A_TakeInventory("HHHAudioToken",1000);
		UNK2 B 0 A_GiveInventory("HHHAudioToken",2);
	FireProtC:
		UNK2 B 4 Bright A_GiveInventory("HHHProtectionOn",1);
		UNK2 B 9 Bright A_FireProjectile("ProtectionShover", 0, 0, 0, 0);
		UNK2 B 0 A_ReFire("ProtectionHold");
		UNK2 B 0 A_StopSound(CHAN_WEAPON);
		UNK2 B 0 A_StopSound(CHAN_LISTENERZ);
		UNK2 B 0 A_GiveInventory("HHHProtectionOff",1);
		Goto Ready;
	ProtectionHold:
		UNK2 B 0 A_JumpIfInventory("PowerEconomizer",1,3);
		UNK2 B 0 A_JumpIfInventory("InfiniteAmmo",1,2);
		UNK2 B 0 A_JumpIfInventory("DarkMana",1,1);
		Goto Ready;
		
		UNK2 B 0 A_FireProjectile("ProtectionShover", 0, 0, 0, 0);
		UNK2 B 13 Bright A_GiveInventory("HHHProtectionOn",1);
		UNK2 B 0 A_ReFire("ProtectionHold");
		UNK2 B 0 A_TakeInventory("HHHAudioToken",1000);
		UNK2 B 0 A_StopSound(CHAN_WEAPON);
		UNK2 B 0 A_StopSound(CHAN_LISTENERZ);
		UNK2 B 0 A_GiveInventory("HHHProtectionOff",1);
		UNK2 B 0 A_RemoveChildren(1,RMVF_EVERYTHING,"HHHAmmoTaker");
		Goto Ready;
		
		UNK2 B 0 A_RemoveChildren(1,RMVF_EVERYTHING,"HHHAmmoTaker");
		Goto Ready;
	*/
	FireStrength:
		UNK1 C 8 Bright A_Light1();
		UNK2 C 8 Bright A_Light2();
		UNK2 C 4 Offset(0,40) bright
		{
			A_PlaySound("hhh/fire1",CHAN_WEAPON|CHAN_LISTENERZ|CHAN_NOPAUSE,1,0,ATTN_NONE);
			A_LightInverse();
			A_FireProjectile("GodsWrath", 0, 1, 0, 0);
			for (int i = 10; i < 360; i += 10)
				A_FireProjectile("GodsWrath", i, 0, 0, 0);
		}
		UNK2 C 4 Offset(0,40) Bright A_Light0();
		UNK1 C 8 Bright Offset(0,35);
		UNK1 C 0;
		Goto Ready;
	}
}
/*
Class HHHAudioToken : Inventory
{	Default { Inventory.MaxAmount 2;	Inventory.InterhubAmount 0;	} }

Class HHHAudioSpawned : Inventory
{	Default { Inventory.MaxAmount 1;	Inventory.InterhubAmount 0;	} }

Class HHHProtectionAudio : Actor
{
	int user_d;
	Default
	{
		+NOINTERACTION
		+NOTIMEFREEZE
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_PlaySound("HHH/fire2main",5,1,1);
			A_PlaySound("HHH/fire2chant",6,0.7,1);
			A_PlaySound("DemonMorph/Loop",7,0.6,1);
			A_SetInventory("HHHAudioSpawned",1,MasterPtr);
			user_d = 90;
		}
	Play:
		TNT1 A 1 
		{
			if (CountInv("PowerDemonMorph",MasterPtr) || user_d < 1)
			{
				A_StopSound(5);
				A_StopSound(6);
				A_StopSound(7);
				A_SetInventory("HHHAudioSpawned",0,MasterPtr);
				A_SetInventory("HHHAudioToken",0,MasterPtr);
				return state("Null");
			}
			
			if (CountInv("HHHAudioToken",MasterPtr) >= 2)
			{	
				if (user_d < 2000)
				{	user_d += 90;	}
				else
				{	user_d = 2000;	}
			}
			else	
			{	user_d -= 90;	}
			A_Warp(AAPTR_MASTER,2000 - user_d,0,16,0,WARPF_NOCHECKPOSITION);
			return state(0);
		}
		Wait
	}
}

Class HHHAmmoTaker : Actor
{
	Default
	{
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 70
		TNT1 A 0 A_JumpIfInventory("InfiniteAmmo",1,"Spawn",AAPTR_MASTER)
		TNT1 A 0 A_JumpIfInventory("PowerEconomizer",1,"Spawn",AAPTR_MASTER)
		TNT1 A 0 A_TakeInventory("DarkMana",1,1,AAPTR_MASTER)
		Loop
	}
}
*/
Class HHHKnowledgePSpawnerSingle : Actor
{
	Default
	{
		Projectile;
		+NOINTERACTION
		+NOTIMEFREEZE
		Translation "0:255=%[0.5,1.0,2.0]:[0.5,0.55,1.6]";
		Speed 10;
		Scale 0.25;
		RenderStyle "Add";
		Alpha 0.1;
	}
	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 A 0 A_Stop();
//		X013 B 1 Bright A_SpawnProjectile("HHHKnowledgeParticle",0,0,0+random(0,360),6,0+random(-90,90))
		TNT1 A 0 A_SpawnItemEx("HHHKnowledgeParticle",20,0,0,random(-15,15),random(-15,15),random(-15,15),0,SXF_NOCHECKPOSITION);
//		X013 CDEFGHIJKLMNOPQRSTUVWXY 1 bright
		Stop;
	}
}

Class HHHKnowledgePSpawnerDouble : Actor
{
	Default
	{
		Projectile;
		+NOINTERACTION
		+NOTIMEFREEZE
		Translation "0:255=%[0.5,1.0,2.0]:[0.5,0.55,1.6]";
		Scale 0.25;
		Alpha 0.1;
		Speed 10;
		RenderStyle "Add";;
	}
	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 A 0 A_Stop();
		X013 BB 0 Bright A_SpawnItemEx("HHHKnowledgeParticle",20,0,0,random(-15,15),random(-15,15),random(-15,15),0,SXF_NOCHECKPOSITION);
		X013 BCDEFGHIJKLMNOPQRSTUVWXY 1 bright;
		Stop;
	}
}

Class HHHKnowledgeParticle : Actor
{
	Default
	{
		Projectile;
		+NOINTERACTION
		+NOTIMEFREEZE
	//	Speed 15;
		Scale 0.03;
		Alpha 0.0;
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		TNT1 A 1 A_ChangeVelocity(0+random(10,80),0,0,3);
		TNT1 A 0 A_ScaleVelocity(0.20);
		X099 AAAAAAAAAA 1 A_FadeIn(0.05);
		X099 A 2 A_ScaleVelocity(-1.0);
		X099 AAAA 2 A_ScaleVelocity(1.25);
		Stop;
		//X029 A 2 A_FadeOut(0.1)
	}
}

Class HHHArmor : ArmorBonus
{
	Default
	{
		Armor.SaveAmount 2;
		Armor.MaxSaveAmount 666;
		Inventory.Icon "ARM1A1";
	}
} 

Class HHHHealth : HealthBonus
{
	Default
	{
		Inventory.Amount 2;
		Inventory.MaxAmount 666;
	}
}

Class PowerPlayerGrounder : Inventory //Used to stop the player from being forced around by projectiles.
{
	Default
	{
		Inventory.InterhubAmount 0;
	}
}

Class ProtectionShover : Actor
{
	Default
	{
		Projectile;
		+DONTREFLECT
		+FORCERADIUSDMG
		+EXTREMEDEATH
		+NOINTERACTION
		Radius 1;
		Height 1;
		Speed 0;
	}
	States
	{
	Spawn:
	Death:
		TNT1 A 0 NoDelay A_Explode(50,256,0,0,128);
		Stop;
	}
}

Class Reverser : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}
}

Class PowerEternalTimeFreeze : PowerTimeFreezer { }

Class EternalTimeEffector : PowerupGiver
{
	Default
	{
		Inventory.PickupMessage "";
		//inventory.Icon "HARTRUN4";
		Inventory.MaxAmount 1;
		Inventory.PickupSound "hhh/charge1";
		Inventory.UseSound "hhh/charge1";
		powerup.type "PowerEternalTimeFreeze";
		powerup.duration 9999;
		//Powerup.Color "0 0 0" 0.5;
		+INVENTORY.FANCYPICKUPSOUND
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
		+NOTIMEFREEZE
	}
	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	Use:
		TNT1 A 1;
		Stop;
	}
}

Class EternalMissile : FastProjectile
{
	Default
	{
		Projectile;
		+DONTREFLECT
		+NOTIMEFREEZE
		+SEEKERMISSILE
		+HITTRACER
		Damage 0;
		Speed 200;
		Radius 6;
		Height 5;
		MissileType "EternalMTrail1";
	}
	States
	{
	Spawn:
		TNT1 A 1 
		{
			A_SeekerMissile(90,90,SMF_LOOK,256);
			A_FaceTracer(0,0);
		}
		Loop;
	Death:
		TNT1 A 1 
		{
			A_SpawnItemEx("EternalCExplosion",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("EternalComet",0,0,0,0,0,40,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_TRANSFERPOINTERS);
		}
		Stop;
	}
}

Class EternalComet : Actor
{
	Default
	{
		Projectile;
		+THRUACTORS
		+FORCERADIUSDMG
		+EXTREMEDEATH
		+NODAMAGETHRUST 
		+CANNOTPUSH
		+PAINLESS
		+NOTIMEFREEZE
		+FOILINVUL
		+RANDOMIZE
		Speed 0;
		Radius 1;
		Height 1;
		RenderStyle "Add";
		DamageType "Extreme";
		PainType "Telefrag";
		DeathType "Telefrag";
	}
	States
	{
	Spawn:
		X027 ABCDEFGHIJK 1 NoDelay 
		{
			A_Explode(150,100,0);
			A_SpawnItemEx("EternalCometTrail",0,0,0,random(-4,4),random(-4,4),-20,0,SXF_NOCHECKPOSITION);
		}
		Loop;
	Death:
		TNT1 A 1 
		{
			A_Explode(666,333,0);
			A_QuakeEx(5,5,0, 35,0,100,"", QF_SCALEDOWN);
			for (int i = 0; i < 6; i++)
				A_SpawnItemEx("EternalPuffs",0,0,0,random(6,-6)/(2*1.05),random(6,-6)/(2*1.05),random(6,-6)/(2*1.05),0,SXF_NOCHECKPOSITION);
		}
		Stop;
	}
}

Class EternalCExplosion : Actor
{
	Default
	{
		+NOINTERACTION
		+NODAMAGETHRUST 
		+CANNOTPUSH
		+EXTREMEDEATH
		+FORCERADIUSDMG
		+NOTIMEFREEZE
		+FOILINVUL
		+INVISIBLE
	}
	States
	{
	Spawn:
		TNT1 A 35 
		{
			A_Explode(666,333,0);
			A_QuakeEx(5,5,0, 35,0,100,"", QF_SCALEDOWN);
			for (int i = 0; i < 6; i++)
				A_SpawnItemEx("EternalPuffs",0,0,0,random(6,-6)/(2*1.05),random(6,-6)/(2*1.05),random(6,-6)/(2*1.05),0,SXF_NOCHECKPOSITION);
		}
		Stop;
	}
}
/*
Class EternalCExplosion2 : EternalCExplosion
{
	Default
	{
		DamageType "Disintegrate";
	}
	States
	{
	Spawn:
		TNT1 A 0
		TNT1 A 0 A_Explode(512,768,0)
		TNT1 AA 0 A_SpawnItemEx("EternalPuffs",0,0,0,random(6,-6)/(2*1.05),random(6,-6)/(2*1.05),random(6,-6)/(2*1.05),0,SXF_NOCHECKPOSITION)
		TNT1 A 10 A_QuakeEx(2,2,0, 10,0,20,"", QF_SCALEDOWN)
		Stop;
	}
}
*/
Class EternalPuffs : AEoDFX
{
	Default
	{
		+ROLLSPRITE
		+NOINTERACTION
		+NOTIMEFREEZE
		Scale 1;
		Speed 6;
		RenderStyle "Add";
		Translation "0:255=%[0.4,0.3,0.1]:[1.0,1.1,2.0]";
	}
	
	override void PostBeginPlay()
	{
		bSPRITEFLIP = random(0,1);
		roll = random(0,359);
		Super.PostBeginPlay();
	}
	
	States
	{
	Spawn:
		X003 ABCDE 2 Bright A_FadeOut(0.03);
		TNT1 A 0 A_ScaleVelocity(0.9);
		X003 FGHIJ 2 Bright A_FadeOut(0.03);
		TNT1 A 0 A_ScaleVelocity(0.75);
		X003 KLMNO 2 Bright A_FadeOut(0.03);
		TNT1 A 0 A_ScaleVelocity(0.6);
		X003 PQRST 2 Bright A_FadeOut(0.03);
		TNT1 A 0 A_ScaleVelocity(0.5);
		X003 UVWXYZ 2 Bright A_FadeOut(0.03);
		Stop;
	}
}

Class EternalCometTrail : Actor
{
	Default
	{
		Projectile;
		+NOTIMEFREEZE
		+NOINTERACTION
		Speed 8;
		RenderStyle "Add";
		Scale 2.0;
		Alpha 0.7;
	}
	States
	{
	Spawn:
		X032 ABCDEFGHIJKLMNOABCDEFGHIJKLMNO 1 A_ScaleVelocity(0.05);
	Fading:
		X032 ABCDEFGHIJKLMNO 1 A_FadeOut(0.05);
		Loop;
	}
}
	
Class EternalMTrail1 : Actor
{
	Default
	{
		Projectile;
		+NOTIMEFREEZE
		+NOINTERACTION
		Alpha 0.35;
		Speed 1;
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		X032 A 0 NoDelay
		{
			ThrustThing(0+random(0,360),4,0,0);
			ThrustThingZ(0,random(0,4),random(0,1),1);
		}
	Fading:
		X032 ABCDEFGHIJKLMNO 1 A_FadeOut(0.05);
		Loop;
	}
}

Class HHHCheck : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 3;
		Inventory.InterHubAmount 0;
	}
}

Class HHHModeChecker : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 2;
	}
}

//The Wrath of God is upon you! Repent, Heathen, or SUFFER!
Class GodsWrath : Actor
{
	Default
	{
		Projectile;
		Radius 4;
		Height 4;
		Speed 28;
		Damage 0; // Handled in SpecialMissileHit.
		SeeSound "hhh/fire1";
		DeathSound "weapons/explode1";
		DamageType "HolyNoResist";
		DeathType "Disintegrate";
		Translation "0:255=%[0,0,0]:[1,1,1]";
		RenderStyle "Add";
		RipperLevel 666;
		+EXTREMEDEATH
		+RIPPER
		+FLOORHUGGER
		+DONTSPLASH
		+FORCERADIUSDMG
		+DONTREFLECT
		+NOTIMEFREEZE
		+FOILINVUL
		+OLDRADIUSDMG //Ignores z distance for explosion radius. No more of those WOGPW hacks.
		+CAUSEPAIN
	//	+THRUACTORS
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		if (!victim || victim == target)	
			return 1;
		
		if (!victim.bSHOOTABLE && !victim.bVULNERABLE)
			return 1;
		
		int hp = victim.health;
		if (hp > 0)
		{
			/*
			int dmg = 666;
			if (victim.bNODAMAGE && hp < dmg)
			{
				dmg = hp - 1;
			}
			*/
			victim.DamageMobj(self, target, 666, DamageType, 
				DMG_FOILINVUL|DMG_FOILBUDDHA|DMG_NO_PROTECT|DMG_NO_FACTOR);
		}
		return 1;
	}
	
	States
	{
	Spawn:
		TNT1 A 1 
		{
			A_SpawnProjectile("EternalPuffs",0,0,0+random(0,360),2,0+random(0,-90));
			A_Explode(666,768,0,0,666);
		}
		Loop;
	Death:
		TNT1 A 1
		{
			for (int i = 0; i < 6; i++)
				A_SpawnProjectile("EternalPuffs",0,0,0+random(0,360),2,0+random(0,-90));
			bNODAMAGETHRUST = true;
			A_Explode(1000000,1024,0,0,512);
		}
		Stop;
	}
}

Class GodsWrathTrail : Actor
{
	Default
	{
		Radius 8;
		Height 6;
		Speed 0;
		Scale 0.7;
		Projectile;
		+FLOORHUGGER
		+DONTSPLASH
		+THRUACTORS
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		FRTF ABCDEFGHIJKLMO 2 Bright;
		Stop;
	}
}

Class HellHeavenHandDrop : AEoDWeaponDrop
{
	Default
	{
		Inventory.MaxAmount 1;
	}
	States
	{
	Use:
		TNT1 A 0
		{
			A_UnSetReflectiveInvulnerable();
			A_TakeInventory("PowerEternalTimeFreeze",1);
			A_TakeInventory("PowerPlayerGrounder",1);
			bNODAMAGE = false;
			A_StopSound(CHAN_WEAPON);
			A_StopSound(CHAN_LISTENERZ);
			A_SpawnItemEx("DroppedHellHeavenHand",0,0,32,8,0,0,0,SXF_NOCHECKPOSITION,0);
			return true;
		}
		Stop;
	}
}

Class DroppedHellHeavenHand : Actor
{
	Default
	{
		Radius 16;
		Height 20;
	}
	States
	{
	Spawn:
		HELG A 15;
		TNT1 A 0 A_SpawnItemEx("AEoDHellHeavenHandNoAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
		Stop;
	}
}

Class AEoDHellHeavenHandNoAmmo : AEoDHellHeavenHandItem
{
	Default
	{
		+FLOORCLIP
		+DONTGIB
		+INVENTORY.IGNORESKILL	
		Inventory.Amount 1;
		Inventory.PickupSound "DMage/death";
		Inventory.PickupMessage "You are now worthy of the Great one's strength, the Dark one's protection, and the Eternal one's knowledge! Behold the HELL AND HEAVEN HAND!";
	}
	States
	{
	Spawn:
		HELG A -1;
		Loop;
	Pickup:
		TNT1 A 0 A_JumpIf(CallACS("WeaponSlotLimitCheck",0) <= 0,"Nothing");
		TNT1 A 0 A_JumpIfInventory("RedMana",50,"Ammo");
		TNT1 A 0 A_JumpIfInventory("DarkMana",20,"Ammo3");
		TNT1 A 0 A_GiveInventory("Weapon0Count",1);
		TNT1 A 0 A_GiveInventory("HellHeavenHandDrop",1);
		TNT1 A 0 A_GiveInventory("AEoDHellHeavenHand",1);
		TNT1 A 0 A_TakeInventory("RedMana",50);
		TNT1 A 0 A_TakeInventory("DarkMana",20);
		TNT1 A 0 ;
		Stop;
	Nothing:
		TNT1 A 0 A_JumpIfInventory("AEoDHellHeavenHand",1,"Ammo");
		TNT1 A 0 A_JumpIfInventory("LimitScriptActive",1,1);
		Goto Pickup+2;
		
		TNT1 A 0 ACS_NamedExecute("s798",0,0,160,0);
		Fail;
	Ammo:
		TNT1 A 0 A_JumpIfInventory("DarkMana",20,1);
		Goto Ammo2;
		
		TNT1 A 0 A_TakeInventory("RedMana",50);
		TNT1 A 0 A_TakeInventory("DarkMana",20);
		TNT1 A 0 A_JumpIfInventory("AEoDHellHeavenHand",1,2);
		TNT1 A 0 A_GiveInventory("Weapon0Count",1);
		TNT1 A 0 A_GiveInventory("HellHeavenHandDrop",1);
		TNT1 A 0 A_GiveInventory("AEoDHellHeavenHand",1);
		Stop;
	Ammo2:
		TNT1 A 0 A_TakeInventory("RedMana",50);
		TNT1 A 0 A_GiveInventory("Weapon0Count",1);
		TNT1 A 0 A_GiveInventory("HellHeavenHandDrop",1);
		TNT1 A 0 A_GiveInventory("AEoDHellHeavenHand",1);
		TNT1 A 0 A_TakeInventory("DarkMana",20);
		Stop;
	Ammo3:
		TNT1 A 0 A_TakeInventory("DarkMana",20);
		TNT1 A 0 A_GiveInventory("Weapon0Count",1);
		TNT1 A 0 A_GiveInventory("HellHeavenHandDrop",1);
		TNT1 A 0 A_GiveInventory("AEoDHellHeavenHand",1);
		TNT1 A 0 A_TakeInventory("RedMana",50);
		Stop;
	}
}