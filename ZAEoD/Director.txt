Class DirectorSpawner : CustomInventory
{
	Default
	{
	+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_SpawnItemEx("TheDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_NOPOINTERS|SXF_SETTARGET);
		Stop;
	}
}

Class MonDirIntensity : Inventory
{	Default { Inventory.MaxAmount 666; }	}

Class FreezeDirector : Inventory {}
Class RemoveDirector : CustomInventory 
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_RadiusGive("DirectorRemover",32767,RGF_MONSTERS|RGF_NOSIGHT,1,null,"Director");
		Stop;
	}
}

Class DirectorRemover : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_Remove(DefPtr,RMVF_EVERYTHING,null,"Director");
		Stop;
	}
}

Class SmallSpawnToken : Inventory
{
	Default
	{
		Inventory.MaxAmount 20;
		Inventory.InterHubAmount 20;
	}
}

//==============================================================================
//==============================================================================
// Director Base Class
//==============================================================================
//==============================================================================
Class DirectorBase : Actor 
{	
	const DeathTimer = 35 * 60 * 3; // 3 minutes
	AEoDHandler Event;
	Array<Actor> Items;
	
	Default
	{
		Monster;
		+LAXTELEFRAGDMG
		-SHOOTABLE
		+NONSHOOTABLE
		-VULNERABLE
		+NOBLOCKMAP
		+INVISIBLE
		+THRUSPECIES
		+NEVERTARGET
		+NOTRIGGER
		+NOFEAR
		+NOPAIN
		+NOBLOOD
		+NOTARGETSWITCH
		RenderStyle "None";
		Species "Director";
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (!other)	return false;
		if (!passive)
		{
			if (other.bSOLID &&
				(other.bSHOOTABLE || other.bCORPSE || other.bISMONSTER || other.health < 1))
				return false;
		}
		return true;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{	return -1;	}
	
	virtual void GrabCvars()
	{
		if (!Event)	Event = AEoDHandler.Fetch();
	}
}

Class DirectorMain : DirectorBase
{
	AEArray SmallKids, MediumKids, LargeKids;
	int RealIntensity;
	int RealDelay;
	
	
	override void PostBeginPlay()
	{
		SmallKids = AEArray.Create();
		MediumKids = AEArray.Create();
		LargeKids = AEArray.Create();
		
		Super.PostBeginPlay();
	}
	// We only 
	override void OnDestroy()
	{
		int size = SmallKids.Size();
		for (int i = 0; i < size; i++)	if (SmallKids.Actors[i])	SmallKids.Actors[i].Destroy();
		size = MediumKids.Size();
		for (int i = 0; i < size; i++)	if (MediumKids.Actors[i])	MediumKids.Actors[i].Destroy();
		size = LargeKids.Size();
		for (int i = 0; i < size; i++)	if (LargeKids.Actors[i])	LargeKids.Actors[i].Destroy();
		Super.OnDestroy();
	}
	
	override void Activate(Actor activator)
	{
		if (target)	SetOrigin(target.pos, false);
		int size = SmallKids.Size();
		for (int i = 0; i < size; i++)	if (SmallKids.Actors[i])	{	SmallKids.Actors[i].Activate(activator);	SmallKids.Actors[i].SetOrigin(pos, false);	}
		size = MediumKids.Size();
		for (int i = 0; i < size; i++)	if (MediumKids.Actors[i])	{	MediumKids.Actors[i].Activate(activator);	MediumKids.Actors[i].SetOrigin(pos, false);	}
		size = LargeKids.Size();
		for (int i = 0; i < size; i++)	if (LargeKids.Actors[i])	{	LargeKids.Actors[i].Activate(activator);	LargeKids.Actors[i].SetOrigin(pos, false);	}
		Super.Activate(activator);
	}
	
	override void Deactivate(Actor activator)
	{
		int size = SmallKids.Size();
		for (int i = 0; i < size; i++)	if (SmallKids.Actors[i])	SmallKids.Actors[i].Deactivate(activator);
		size = MediumKids.Size();
		for (int i = 0; i < size; i++)	if (MediumKids.Actors[i])	MediumKids.Actors[i].Deactivate(activator);
		size = LargeKids.Size();
		for (int i = 0; i < size; i++)	if (LargeKids.Actors[i])	LargeKids.Actors[i].Deactivate(activator);
		Super.Deactivate(activator);
	}
	
	int Timer;
	override void Tick()
	{
		if (IsFrozen())
			return;
		
		Timer++;
		if (Timer >= 350)
		{
			SmallKids.Clean();
			MediumKids.Clean();
			LargeKids.Clean();
		}
		Super.Tick();
	}
	
	
	
	//--------------------------------------------------------------------------
	// Custom Functions
	//--------------------------------------------------------------------------
	// Removes a kid from the arrays. Note that the AEArray Delete() function just
	// nulls it out. Said nulls are cleaned by an auto timer every 10 seconds
	// (see above
	void RemoveKid(Actor who)
	{
		if (!who || bDESTROYED)	return;
		
		if (!SmallKids.Delete(who))
			if (!MediumKids.Delete(who))
				LargeKids.Delete(who);
	}
}

//==============================================================================
// Normal Director
//==============================================================================
Class TheDirector : DirectorMain
{
	int mul;
	int bias0, bias1;
	//Biasity (#/256) to jump to the medium and large spawning categories.
	//random(1,256) <= bias[#]
	//0 = Medium spawn chance
	//1 = Large spawn chance
	int cc[4];
	//Max number of children allowed active at any time.
	//Determined by script.
	//0 = Small spawners
	//1 = Medium spawners
	//2 = Large spawners
	//3 = Absolute maximum of total children at any time.
	int cd[7];
	//Will be used by the script to determine current intensities.
	//0 = Small cooldown min
	//1 = Small cooldown max
	//2 = Medium cooldown min
	//3 = Medium cooldown max
	//4 = Large cooldown min
	//5 = Large cooldown max
	//6 = Random amount to add to cooldowns from 0 to 3
	int cooldown[3];
	//0 = Normal cooldown
	//1 = Exclusive small child countdown
	Default
	{
		Monster;
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		+FLOORHUGGER
		+NORADIUSDMG
		+THRUACTORS
		+NOBLOOD
		+NOTELEPORT
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		-SOLID
		-NODROPOFF
		+DROPOFF
		+NOTRIGGER
		+NOBLOCKMAP
		+NOFEAR
		+NOTELESTOMP
		+NOCLIP
		+DONTTHRUST
		+NODAMAGE
		+NOPAIN
		+DONTSPLASH
		+DONTCORPSE
		Radius 120;
		Height 80;
		Speed 20;
		Species "Director";
		RenderStyle "None";
		TeleFogSourceType "";
		TeleFogDestType "";
	}
	
	override void PostBeginPlay()
	{
		
		Event = AEoDHandler.Fetch();
		if (!Event || Event.NormalDirector)	
		{
			Destroy();	return;
		}
		Event.NormalDirector = self;
		target = players[0].mo;
		GrabCvars();
		bias0 = 48; //#/256 chance to spawn medium
		bias1 = 24; //^ large
		cc[0] = 3; //max small children spawners
		cc[1] = 2; //^ medium
		cc[2] = 1; //^ large
		cc[3] = 12; //Absolute maximum number of children at any time.
		cd[0] = 750; //Small cooldown min
		cd[1] = 2000; //Small cooldown max
		cd[2] = 2000; //Medium cooldown min
		cd[3] = 4500; //Medium cooldown max
		cd[4] = 3000; //Large cooldown min
		cd[5] = 6000; //Large cooldown max
		cd[6] = random(50,175);
		mul = RealIntensity;
		if (mul <= 0)
		{
			A_PrintBold("Multiplier <= 0. This should not happen!\nReport this to the AEoD team immediately.",7.0);
			mul = 3; //Prevent division by 0.
		}
		bFRIENDLY = false;	
		
		SetOrigin(target.pos, false);
		angle = target.angle;
		Super.PostBeginPlay();
	}
	
	override void GrabCvars()
	{
		Super.GrabCvars();
		
		if (Event)
		{
			Event.GetCvars();
			RealIntensity = Event.MonIntensity;
			RealDelay = 	Event.DirDelay;
		}
	}
	
	States
	{
	Spawn:
		// 1 minute
		TNT1 A 2100 NoDelay 
		{
			if (target && target.CountInv("PFirstTimeToken"))
			{
				A_SetTics(35 * 120); // 2 minutes because starting up for the first time
				target.A_SetInventory("PFirstTimeToken",0);
				target.A_GiveInventory("SmallSpawnToken",20);
			}
			//A_SetTics(35);
		}
		Goto Idle;
	Active:
	Idle:
		TNT1 A 1 A_Look();
		Loop;
	See:
		TNT1 A 0 
		{
			A_ChangeLinkFlags(true);
			A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION);
		}
	Chasing:
		TNT1 A 0 
		{
			//if (target && target.CountInv("RemoveDirector"))	return ResolveState("Death");
			A_UnsetShootable();
			if (cooldown[0] > 0)
			{	cooldown[0] -= (mul*random(7,10));	}
			if (cooldown[1] > 0)
			{	cooldown[1] -= (mul*random(7,10));	}
			return ResolveState(null);
		}
		TNT1 AAA 2 A_Chase();
		Loop;
	Missile:
		TNT1 A 3 
		{
			StateLabel next = null;
			
			target = players[0].mo;
			if (target)
			{
				SetOrigin(target.pos, false);
				angle = target.angle;
				
				if (target.CountInv("SmallSpawnToken"))		next = "SmallMobShoot";
				else if (mul < 666)							next = "Missile2";
			}
			if (next != null)	return ResolveState(next);
			
			return A_Jump(256,"SmallMobShoot","MediumMobShoot","LargeMobShoot");
		}
		Goto SmallMobShoot;
	Missile2:
		//The -# is needed because at a base of 1, it still adds on 4 and 6 to large/medium.
		//Think of it in terms of n-1.
		TNT1 A 0 A_JumpIf(random(1,2560) <= ((bias1+(mul*40))-40),"LargeMobShoot");
		TNT1 A 0 A_JumpIf(random(1,2560) <= ((bias0+(mul*60))-60),"MediumMobShoot");
		Goto SmallMobShoot;
	LargeMobShoot:
		TNT1 A 0 
		{
			if (cooldown[0] > 0 || LargeKids.Size() >= (cc[2] + mul))
			{	
				//Console.Printf("Size: %d - CD: %d - Max: %d", LargeKids.Size(), cooldown[0], (cc[2] + mul));
				return ResolveState("Chasing");	
			}
			let kid = MCLargeMobRunner(Spawn("MCLargeMobRunner",pos, ALLOW_REPLACE));
			if (kid)
			{
				
				kid.master = self;
				kid.target = target;
				kid.tracer = tracer;
				kid.angle = angle;
				kid.Spawner = self;
				cooldown[0] = random(cd[4], cd[5]) + random(0, cd[6]);
				LargeKids.Push(kid);
				return ResolveState("ChanceCD");
			}
			
			return ResolveState("Chasing");
		}
	MediumMobShoot:
		TNT1 A 0 
		{
			if (cooldown[0] > 0 || MediumKids.Size() >= cc[1] + mul)	
			{
				//Console.Printf("Size: %d - Cooldown: %d", MediumKids.Size(), cooldown[0]);
				return ResolveState("Chasing");
			}
			let kid = MCMediumMobRunner(Spawn("MCMediumMobRunner",pos, ALLOW_REPLACE));
			if (kid)
			{
				kid.master = self;
				kid.target = target;
				kid.tracer = tracer;
				kid.angle = angle;
				kid.Spawner = self;
				cooldown[0] = random(cd[2], cd[3]) + random(0, cd[6]);
				MediumKids.Push(kid);
				return ResolveState("ChanceCD");
			}
			
			return ResolveState("Chasing");
		}
	SmallMobShoot:
		TNT1 A 0 
		{
			int s = SmallKids.Size();
			if (cooldown[1] > 0 || s >= cc[0] + mul)	
			{
				//Console.Printf("Size: %d - Cooldown: %d", SmallKids.Size(), cooldown[1]);
				return ResolveState("Chasing");
			}

			let kid = MCSmallMobRunner(Spawn("MCSmallMobRunner",pos, ALLOW_REPLACE));
			if (kid)
			{
				
				kid.master = self;
				kid.target = target;
				kid.tracer = tracer;
				kid.angle = angle;
				kid.thid = mul;
				kid.Spawner = self;
				cooldown[1] = random(cd[1], cd[2]) + random(0, cd[6]);
				if (target)	target.A_TakeInventory("SmallSpawnToken",1);
				SmallKids.Push(kid);
				return ResolveState("ChanceCD");
			}
			
			return ResolveState("Chasing");
		}
	ChanceCD:
		TNT1 A 1
		{
			if (random(1,256) <= 240)	
				return ResolveState("Chasing");
			
			// 35 tics = 1 second
			// 350 tics = 10 seconds
			// 30 to 60 seconds
			A_SetTics(350 * random(3,6));
			return ResolveState(null);
		}
		Goto Chasing;
	Death:
		TNT1 A 35;
		Stop;
	}
}
//==============================================================================
//==============================================================================
// KIDDIES! They don't inherit from DirectorMain on purpose.
//==============================================================================
//==============================================================================
Class DirectorKid : DirectorBase
{
	DirectorMain Spawner;
	int thid;
	int user_t;
	
	override void OnDestroy()
	{
		if (Spawner)	Spawner.RemoveKid(self);
		Super.OnDestroy();
	}
	
	
	//--------------------------------------------------------------------------
	// Custom functions for kids!
	//--------------------------------------------------------------------------
	protected void A_SpawnItemEx2(Class<Actor> itemtype, double xofs = 0, double yofs = 0, double zofs = 0, double xvel = 0, double yvel = 0, double zvel = 0, double angle = 0, int flags = 0, int failchance = 0, int tid = 0)
	{
		bool a; Actor b;
		[a, b] = A_SpawnItemEx(itemtype, xofs, yofs, zofs, xvel, yvel, zvel, angle, flags, failchance, tid);
		if (a && b)
		{
			Items.Push(b);
		}
	}
	
	protected void DelayDestruction()
	{
		if (Spawner) Spawner.RemoveKid(self);
			Spawner = null;
		A_SetSpecies("Nu");
		bNOINTERACTION = bNOTONAUTOMAP = bNOGRAVITY = true;
		A_SetTics(35 * 60 * 3);
	}
	
	protected void KidTick()
	{
		if (!Spawner)		{	Destroy();	return;	}
		A_Chase(null,null);
	
		if (user_t < 140)	user_t++;
		else				bCANTLEAVEFLOORPIC = false;
		
		A_ChangeLinkFlags(false);
		bTHRUACTORS = false;
		
		if (A_CheckBlock("Stuck",CBF_DROPOFF))
		{	Destroy();	return;		}
		
		bTHRUACTORS = true;
		A_ChangeLinkFlags(true);
	}
	
}

Class MCLargeMobRunner : DirectorKid
{
	int user_boss1, user_boss0;
	//0 = Cyberdemon or Spider Mastermind?
	//1 = Have we chosen to spawn the big baddies above?
	int user_dlimit;
	Default
	{
		Monster;
		+THRUACTORS
		+FRIGHTENED
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		Speed 7;
		Radius 128;
		Height 100;
		Species "Director";
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			//Chooses between spider mastermind and cyberdemon.
			ChangeTID(0);
			user_boss0 = random(0,1);
		}
	Idle:
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
	Wanderbout:
		TNT1 AAAAAAAAA 1 A_Wander();
		TNT1 A 1 KidTick();
	Mobmaking:
		TNT1 A 0
		{
			if (A_CheckSightOrRange(250, "Null"))
			{
				static const Class<Actor> mon[] =
				{
					"CyberdemonReplacer",
					"SpiderMastermindReplacer",
					"ArchvileReplacer",
					"ArchvileReplacer",
					"ArchvileReplacer",
					"ArchvileReplacer"
				};
				
				int rng = 0;
				if (user_boss1)		rng = random(0,1);
				else
				{
					rng = random(0, mon.Size() - 1);
					if (rng < 2)	user_boss1 = true; //Boss selected. Keep it.
				}
				
				bool a = false;	Actor kid = null;
				[a, kid] = A_SpawnItemEx(mon[rng], flags: SXF_TRANSFERPOINTERS);
				if (a && kid)
					if (++user_dlimit >= 4 || user_boss1) // Boss monsters are one hit wonders.
						return ResolveState("Vanish");
			}
			return ResolveState("Wanderbout");
		}
		Goto Wanderbout;
	Vanish:
		TNT1 A 0 
		{
			A_SpawnItemEx("AEoD6SpellSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,252);
			A_SpawnItemEx("BFGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("PlasmaRifleReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("RocketLauncherReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("ChaingunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("SSGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("ShotgunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("Megasphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-36);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-66);
			
			for (int i = 0; i < 9; i++)
			{
				if (i < 3)
				{
					A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
					A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
					A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
					A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-192);
				}
				
				if (i < 4)
				{
					A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
				}
				A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-164);
			}
		}
		Goto Death;
	SpecialDrops:
		TNT1 A 0 A_SpawnItemEx("BeastlyHealthDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);
		TNT1 AAA 0 A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-160);
		TNT1 A 0 A_SpawnItemEx("RandomWeaponPower",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);
		Goto Death;
	Death:
		TNT1 A 1 DelayDestruction();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 
		{
			if (!A_GiveToChildren("DropTimer",1))
			{	Destroy();	return;	}
		}
		Stop;
	}
}


Class MCMediumMobRunner : DirectorKid
{
	int user_dlimit;
	Default
	{
		Monster;
		+THRUACTORS
		+FRIGHTENED
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		Radius 64;
		Height 40;
		Speed 7;
		Health 1000000;
		DamageFactor "Normal", 0.0;
		DamageFactor "DirectorKiller", 32767;
		Species "Director";
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 ChangeTID(0);
	Idle:
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
	Wanderbout:
		TNT1 AAAAAAAAA 1 A_Wander();
		TNT1 A 1 KidTick();
	Mobmaking:
		TNT1 A 0
		{
			if (A_CheckSightOrRange(250, "Null"))
			{
				static const Class<Actor> mon[] =
				{
					"FatsoReplacer",
					"RevenantReplacer",
					"HellKnightReplacer",
					"BaronofHellReplacer",
					"PainReplacer",
					"CacoReplacer",
					"ArachnotronReplacer"
				};
				
				bool a = false;	Actor kid = null;
				int rng = random(0, mon.Size() - 1);
				[a, kid] = A_SpawnItemEx(mon[rng], flags: SXF_TRANSFERPOINTERS);
				if (a && kid)
					if (++user_dlimit >= 4)
						return ResolveState("Vanish");
			}
			return ResolveState("Wanderbout");
		}
		Goto Wanderbout;
	Vanish:
		TNT1 A 0 A_JumpIf(thid >= 666,"SpecialDrops");
		//TNT1 A 0 A_GiveInventory("CooldownDisable1",1,AAPTR_MASTER)
		//TNT1 A 0 A_GiveInventory("MediumCooldown",1,AAPTR_MASTER)
		TNT1 A 0 A_SpawnItemEx("AEoD6SpellSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,254);
		TNT1 A 0 A_SpawnItemEx("BFGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-16);
		TNT1 A 0 A_SpawnItemEx("PlasmaRifleReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-66);
		TNT1 A 0 A_SpawnItemEx("RocketLauncherReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-76);
		TNT1 A 0 A_SpawnItemEx("SSGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-106);
		TNT1 A 0 A_SpawnItemEx("ShotgunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-164);
		TNT1 A 0 A_SpawnItemEx("ChaingunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-164);
		TNT1 AA 0 A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 AAA 0 A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 AA 0 A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 AA 0 A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 A 0 A_SpawnItemEx("Megasphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-4);
		TNT1 A 0 A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-11);
		TNT1 AAAAAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
		TNT1 AAA 0 A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
		Goto Death;
	SpecialDrops:
		TNT1 A 0 A_SpawnItemEx("BeastlyHealthDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-192);
		TNT1 AAA 0 A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-160);
		TNT1 A 0 A_SpawnItemEx("RandomWeaponPower",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-220);
		TNT1 A 0 A_Jump(192,1,2,3,4,5,6);
		Goto Death;
		TNT1 A 0 A_SpawnItemEx("BFGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);				Goto Death;
		TNT1 A 0 A_SpawnItemEx("PlasmaRifleReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);		Goto Death;
		TNT1 A 0 A_SpawnItemEx("RocketLauncherReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);	Goto Death;
		TNT1 A 0 A_SpawnItemEx("SSGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);				Goto Death;
		TNT1 A 0 A_SpawnItemEx("ShotgunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);			Goto Death;
		TNT1 A 0 A_SpawnItemEx("ChaingunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);			Goto Death;
	Death:
		TNT1 A 1 DelayDestruction();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 
		{
			//if (A_RadiusGive("DropTimer",256,RGF_ITEMS|RGF_NOSIGHT,1))
			if (!A_GiveToChildren("DropTimer",1))
			{	Destroy();	return;	}
		}
		Stop;
	}
}

Class MCSmallMobRunner : DirectorKid
{
	int user_dlimit;
	Default
	{
		Radius 30;
		Height 56;
		Monster;
		+THRUACTORS
		+FRIGHTENED
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		//+FLOORHUGGER
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		//MaxDropOffHeight 128
		//MaxStepHeight 128
		Speed 7;
		Health 1000000;
		DamageFactor "Normal", 0.0;
		DamageFactor "DirectorKiller", 32767;
		Species "Director";
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			ChangeTID(0);
			user_dlimit = 0; 
		}
	Idle:
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
	Wanderbout:
		TNT1 AAAAAAAAA 1 A_Wander();
		TNT1 A 1 KidTick();
	Mobmaking:
		TNT1 A 0
		{
			if (A_CheckSightOrRange(250, "Null"))
			{
				static const Class<Actor> mon[] =
				{
					"ZombieReplacer",
					"ShotguyReplacer",
					"ChainguyReplacer",
					"ImpReplacer",
					"LostSoulReplacer",
					"DemonReplacer"
				};
				
				bool a = false;	Actor kid = null;
				int rng = random(0, mon.Size() - 1);
				[a, kid] = A_SpawnItemEx(mon[rng], flags: SXF_TRANSFERPOINTERS);
				if (a && kid)
					if (++user_dlimit >= 10)
						return ResolveState("Vanish");
			}
			return ResolveState("Wanderbout");
		}
		Goto Wanderbout;
	Vanish:
		TNT1 A 0 A_JumpIf(thid >= 666,"SpecialDrops");
		TNT1 A 0 A_SpawnItemEx("RocketLauncherReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-16);
		TNT1 A 0 A_SpawnItemEx("SSGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-36);
		TNT1 A 0 A_SpawnItemEx("ShotgunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-76);
		TNT1 A 0 A_SpawnItemEx("ChaingunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-66);
		TNT1 AA 0 A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 AA 0 A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 AA 0 A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-32);
		TNT1 AA 0 A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-32);
		TNT1 A 0 A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-16);
		TNT1 AAAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
		TNT1 AAA 0 A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-48);
		Goto Death;
	SpecialDrops:
		TNT1 A 0 A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-192);
		TNT1 AAA 0 A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
		TNT1 A 0 A_SpawnItemEx("RandomWeaponPower",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
		TNT1 A 0 A_Jump(128,1,2,3,4);
		Goto Death;
		TNT1 A 0 A_SpawnItemEx("RocketLauncherReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);	Goto Death;
		TNT1 A 0 A_SpawnItemEx("SSGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);				Goto Death;
		TNT1 A 0 A_SpawnItemEx("ShotgunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);			Goto Death;
		TNT1 A 0 A_SpawnItemEx("ChaingunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);			Goto Death;
	Death:
		TNT1 A 1 DelayDestruction();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 
		{
			//if (A_RadiusGive("DropTimer",256,RGF_ITEMS|RGF_NOSIGHT,1))
			if (!A_GiveToChildren("DropTimer",1))
			{	Destroy();	return;	}
		}
		Stop;
	}
}